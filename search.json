[{"path":"https://cdcgov.github.io/SaviR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Welcome!","title":"Welcome!","text":"Thank contributing CDC’s Open Source projects! questions doubts, don’t afraid send way. appreciate contributions, looking forward fostering open, transparent, collaborative environment. contributing, encourage also read LICENSE, README, code--conduct files, also found repository. inquiries questions answered content repository, feel free contact us.","code":""},{"path":"https://cdcgov.github.io/SaviR/CONTRIBUTING.html","id":"public-domain","dir":"","previous_headings":"","what":"Public Domain","title":"Welcome!","text":"project public domain within United States, copyright related rights work worldwide waived CC0 1.0 Universal public domain dedication. contributions project released CC0 dedication. submitting pull request agreeing comply waiver copyright interest.","code":""},{"path":"https://cdcgov.github.io/SaviR/CONTRIBUTING.html","id":"requesting-changes","dir":"","previous_headings":"","what":"Requesting Changes","title":"Welcome!","text":"pull request/merging process designed give CDC Surveillance Team space opportunity consider discuss suggested changes. policy affects CDC spaces, -line , users expected abide .","code":""},{"path":"https://cdcgov.github.io/SaviR/CONTRIBUTING.html","id":"open-an-issue-in-the-repository","dir":"","previous_headings":"Requesting Changes","what":"Open an issue in the repository","title":"Welcome!","text":"don’t specific language submit like suggest change something addressed, can open issue repository. Team members respond issue soon possible.","code":""},{"path":"https://cdcgov.github.io/SaviR/CONTRIBUTING.html","id":"submit-a-pull-request","dir":"","previous_headings":"Requesting Changes","what":"Submit a pull request","title":"Welcome!","text":"like contribute, please submit pull request. order us merge pull request, must: * least seven days old. Pull requests may held longer necessary give people opportunity assess . * Receive +1 majority team members associated request. significant dissent team, meeting held discuss plan action pull request.","code":""},{"path":"https://cdcgov.github.io/SaviR/DISCLAIMER.html","id":null,"dir":"","previous_headings":"","what":"DISCLAIMER","title":"DISCLAIMER","text":"Use service limited non-sensitive publicly available data. Users must use, share, store kind sensitive data like health status, provision payment healthcare, Personally Identifiable Information (PII) /Protected Health Information (PHI), etc. circumstance. Administrators service reserve right moderate information used, shared, stored service time. user abide disclaimer Code Conduct may subject action, including revoking access services. material embodied software provided “-” without warranty kind, express, implied otherwise, including without limitation, warranty fitness particular purpose. event shall Centers Disease Control Prevention (CDC) United States (U.S.) government liable anyone else direct, special, incidental, indirect consequential damages kind, damages whatsoever, including without limitation, loss profit, loss use, savings revenue, claims third parties, whether CDC U.S. government advised possibility loss, however caused theory liability, arising connection possession, use performance software.","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"data-the-frankenstein-dataset","dir":"Articles","previous_headings":"","what":"Data: The Frankenstein Dataset","title":"COVID Visualizations (COVIS)","text":"onetable - stored metadata iso2 iso3 codes, country names, /DoS/World Bank regions, UN population estimatesget_covid_df(sources = c(\"\", \"\", \"+JHU\", \"+Primary\")) - COVID cases/deaths dataframe sources. calc_add_risk() - Add risk matrix calculations dataframe (df)get_vax() - Get vaccination data World Data (OWID)get_combined_table(type = c(\"\", \"\", \"legacy\"), geometry=FALSE) - Combine one large df, optionally add geometry snippet produces master df variables required following graphics.","code":"# Load in data to create visuals df_who <- get_combined_table(\"WHO\") # China includes Taiwan, Hong Kong, and Macau data df_both <- get_combined_table(\"Both\") # China, Taiwan, Hong Kong, and Macau data disaggregated  # Data for visuals are typically as of Sunday of the current week # but this can be determined dynamically using WHO data. sunday_date <- df_who |>   distinct(date, dow = weekdays(date)) |>   arrange(desc(date)) |>   filter(dow == \"Sunday\") |>   slice(1) |>   pull(date)"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"COVID Visualizations (COVIS)","text":"Epicurves Risk Matrix (Global ) Vaccination Coverage (Global ) plot_epicurve(df, transparent = T) creating epi curves regions, “plot_epicurve” function take df “” observations order match curve Coronavirus Dashboard. individual epi curves region can run simply filtering one region df. function detect region column one region produce epi curve accordingly. creating epi curves DoS regions, plot_epicurve function take df “” observations. Similarly epi curves, individual epi curves can also produce filtering one DoS region.     plot_riskmatrix(df) Note labeling purposes, labels variable added dataframe specifying top 10 countries weekly average incidence, week case percent change, weekly total cases. Exclusion criteria: Countries population less 10 million countries weekly cases totals less 100.","code":"# Epi Curves for WHO -- Global epi_curve_global <- plot_epicurve(df_who, transparent = T)   epi_curve_global plot_epicurve(df_who, transparent = F) # Epi Curves for DoS -- Global state_epi_curve <- plot_epicurve(filter(df_both, date <= sunday_date),                                  type = \"cases\",                                   by_cat = \"State Region\") state_epi_curve # Regions for (r in unique(na.omit(df_who$who_region))) {   epi_curve_regional <- plot_epicurve(filter(df_who, who_region == r), transparent = F)     print(epi_curve_regional) } global_risk_matrix <- df_both %>%   filter(date == sunday_date) %>%   filter(population >= 10000000) %>% # Exclude population less than 10M   filter(week_case >= 100) %>%   mutate(     rank_inc = dense_rank(desc(week_case_incidence)),     rank_per = dense_rank(desc(percent_change_case)),     rank_cas = dense_rank(desc(week_case))   ) %>%   mutate(labels = case_when(     rank_inc %in% 1:10 ~ country,     rank_per %in% 1:10 ~ country,     rank_cas %in% 1:10 ~ country   )) %>%   plot_riskmatrix()   global_risk_matrix global_vax_coverage <- df_both %>%   filter(date <= sunday_date) %>%   filter(date == max(date)) %>%   filter(!is.na(state_region)) %>%   plot_vaxcoverage(by_cat = \"State Region\")  global_vax_coverage"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"maps","dir":"Articles","previous_headings":"","what":"Maps","title":"COVID Visualizations (COVIS)","text":"Notes mapping Burden Map Trend Map Vaccine Map (Global ) default, get_combined_table() return geometry. preferable, since size table quite large geometry list column takes lot space memory. However, want map data, can either call get_combined_table(\"\", geometry = TRUE), join country_coords filtering, like : map_burden(df, region, time_step) “map_burden” function takes pre-filtered data.frame computes displays average incidence country time period selected. region argument optional, used specify specific DoS/region zoom , desired.time_step used specify days used average incidence . always relative latest date data.frame.   example produce 14d map:  map_trend(df, region, time_step = 7) “map_trend” function requires result column weekly percent change converted factors using “cut”. default behavior visualize global trend map, passing data frame filtered specific region providing region name region argument change bounding box accordingly. different time_step can provided. default assumes comparing two 7d periods, can increased decreased accordingly.   example producing different time_step:  map_vaccinations(df, vac_type = c(\"People\", \"Fully\"))","code":"# Filter to only observations with date as of Sunday # and join in geometry df_both_mapping <- df_both %>%   filter(date == sunday_date) %>%   left_join(select(country_coords, id, geometry), by = \"id\") burden_map_global <- df_both |>   filter(date <= sunday_date) |>   map_burden()   burden_map_global for (r in unique(na.omit(df_both$who_region))) {   burden_map_regional <- df_both |>     filter(who_region == r, date <= sunday_date) |>     map_burden(region = r)     print(burden_map_regional) } burden_map_global_14 <- df_both |>   filter(date <= sunday_date) |>   map_burden(time_step = 14)   burden_map_global_14 trend_map_global <- df_both |>   filter(date <= sunday_date) |>   map_trend()   trend_map_global for (r in unique(na.omit(df_both$who_region))) {   trend_map_reg <- df_both |>   filter(date <= sunday_date) |>     map_trend(region = r)    print(trend_map_reg) } df_both |>   filter(date <= sunday_date) |>   map_trend(time_step = 14) global_vax_map <- df_both_mapping %>%   mutate(result = cut(people_vaccinated_per_hundred, breaks = c(0, 1, 3, 10, 30, Inf))) %>%   group_by(country) %>%   filter(!is.na(result)) %>%   filter(date == max(date)) %>%   ungroup() %>%   map_vaccinations(., vac_type = \"People\")  global_vax_map"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"COVID Visualizations (COVIS)","text":"Top 10 Cases Table Top 10 Incidence Table Top 10 Percent Change Table Top 10 Vaccinations Table Top 10 Fully Vaccinated Table Countries Concern Table table_10mostcases(df, time_step = 7, region = NULL, data_as_of = NULL) function presents top-10 table countries based cases reported past time_step. default 7 day period, can adjusted. Additionally, can tweak title data--footnote using variables respectively, inferred internally. table_10incidence(df, time_step = 7, region = NULL, data_as_of = NULL) Similar , computes top-10 countries baseed incidence past time_step. table_10percentchange(df, time_step = 7, second_time_step = 28, region = NULL, data_as_of = NULL) Works similarly , selects top 10 countries based percent change time_step. ’s additional argument second_time_step specifies second (normally longer) period compute percent change . default visualization using weekly change 4 week change. table usually filtered countries certain population size, handled externally. table_10vaccinations(df, type = c(\"Global\", \"Region\"), run_date) “table_10vaccinations” function takes looks country, value1 (people vaccinated per hundred), value2 (daily vaccinations per hundred) column. Note vaccination reporting gaps, df must sliced country recent date people_vaccinated_per_hundred value (one). table_10vaccinations(df, vac_type = c(\"Partial\", \"Fully\"), type = \"Global\", run_date = \"Enter date\") table_countriesofconcern(df, df_vaccinations_manufacturers, country_list) Country Denmark United Kingdom Kenya Portugal United States America South Africa Zambia Date 2023-03-21 2023-03-21 2023-03-21 2023-03-21 2023-03-21 2023-03-21 2023-03-21 New Cases 7 Day Average(7 Day Average Case Incidence per 100,000) 120.6(2.05) 1,094.1(1.62) 1.4(0) 255(2.48) 18,087.6(5.35) 0(0) 0(0) 7 Day Cases 844 7,659 10 1,785 126,613 0 0 Previous 7 Day Cases 907 27,589 6 1,608 170,593 2,481 115 % Change Cases Previous 7 Days -7% -72% 67% 11% -26% -100% -100% New Deaths 7 Day Average(7 Day Average Death Incidence per 100,000) 2.6(0.04) 4.4(0.01) 0(0) 8.1(0.08) 248.7(0.07) 0(0) 0(0) 7 Day Deaths 18 31 0 57 1,741 0 0 Previous 7 Day Deaths 28 681 0 34 1,887 0 0 % Change Deaths Previous 7 Days -36% -95%  68% -8%   Recent Date Vaccinations 2023-03-20 2022-09-11 2023-02-19 2023-02-24 2023-03-14 2023-03-12 2023-03-15 People Vaccinated Per 100 People 81.29 79.71 26.50 95.23 81.25 40.33 55.74 People completed primary vaccination series per 100 People 80.69 75.19 20.26 86.61 69.34 35.13 43.70 Total Vaccinations Per 100 People 223.21 224.04 43.24 273.87 202.71 64.46 63.90 Vaccines Use Johnson&Johnson, Moderna, Pfizer/BioNTech Moderna, Oxford/AstraZeneca, Pfizer/BioNTech Johnson&Johnson, Moderna, Oxford/AstraZeneca, Pfizer/BioNTech, Sinopharm/Beijing Covaxin, Johnson&Johnson, Moderna, Novavax, Oxford/AstraZeneca, Pfizer/BioNTech, Sanofi/GSK, Sinopharm/Beijing, Sinovac Johnson&Johnson, Moderna, Novavax, Pfizer/BioNTech Johnson&Johnson, Pfizer/BioNTech Johnson&Johnson, Oxford/AstraZeneca, Sinopharm/Beijing % Delta since January 1, 2022 Fill manually Fill manually Fill manually Fill manually Fill manually Fill manually Fill manually % Omicron since January 1, 2022 Fill manually Fill manually Fill manually Fill manually Fill manually Fill manually Fill manually","code":"df_both %>%   filter(date <= sunday_date) %>%   filter(population > 1000000) %>%   group_by(country) %>%   filter(!is.na(people_vaccinated_per_hundred)) %>%   filter(date == max(date)) %>%   ungroup() %>%   select(country = who_country, value1 = people_vaccinated_per_hundred, value2 = daily_vaccinations_per_hundred) %>%   arrange(desc(value1)) %>%   head(10) %>%   table_10vaccinations(., run_date = format(sunday_date, \"%B %d, %Y\")) for (r in unique(na.omit(df_both$who_region))) {   tab_out <- df_both %>%     filter(date <= sunday_date) %>%     filter(population > 100000) %>% # Exclude population less than 100,000     filter(who_region == r) %>%     group_by(country) %>%     filter(!is.na(people_vaccinated_per_hundred)) %>%     arrange(date) %>%     top_n(1, date) %>%     distinct(id, .keep_all = T) %>%     select(country = who_country, value1 = people_vaccinated_per_hundred, value2 = daily_vaccinations_per_hundred) %>%     arrange(desc(value1)) %>%     head(10) %>%     table_10vaccinations(., type = r, run_date = format(sunday_date, \"%B %d, %Y\"))    print(htmltools::tagList(tab_out)) } df_both %>%   filter(date <= sunday_date) %>%   filter(population > 1000000) %>%   group_by(country) %>%   filter(!is.na(people_fully_vaccinated_per_hundred)) %>%   filter(date == max(date)) %>%   ungroup() %>%   select(country = who_country, value1 = people_fully_vaccinated_per_hundred, value2 = daily_vaccinations_per_hundred) %>%   arrange(desc(value1)) %>%   head(10) %>%   table_10vaccinations(., run_date = format(sunday_date, \"%B %d, %Y\")) c_list <- c(\"United Kingdom\",\"Denmark\",\"Portugal\",\"South Africa\",\"Kenya\",\"Zambia\",\"United States of America\") c_list_iso <- parse_country(c_list, to = \"iso3c\")  df_both_latest <- df_both %>%   group_by(id) %>%   filter(date == max(date)) %>%   ungroup()  vax_man <- get_vax_manufacturers()  table_countriesofconcern(df_both_latest, vax_man, c_list_iso)"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"day-table","dir":"Articles","previous_headings":"Tables","what":"7-day Table","title":"COVID Visualizations (COVIS)","text":"","code":"df_both |>   filter(date <= sunday_date) |>   table_10mostcases(data_as_of = format(sunday_date, \"%B %d, %Y\"))"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"day-table-1","dir":"Articles","previous_headings":"Tables","what":"14-day Table","title":"COVID Visualizations (COVIS)","text":"","code":"df_both |>   filter(date <= sunday_date) |>   table_10mostcases(time_step = 14)"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"by-region","dir":"Articles","previous_headings":"Tables","what":"By region","title":"COVID Visualizations (COVIS)","text":"","code":"for (r in unique(na.omit(df_both$who_region))) {   tab_out <- df_both |>     filter(date <= sunday_date, who_region == r) |>     table_10mostcases(region = r, data_as_of = format(Sys.Date(), \"%B %d, %Y\"))      print(htmltools::tagList(tab_out)) }"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"day-table-2","dir":"Articles","previous_headings":"Tables","what":"7-day table","title":"COVID Visualizations (COVIS)","text":"","code":"df_both |>   filter(date <= sunday_date) |>   table_10incidence(data_as_of = format(sunday_date, \"%B %d, %Y\"))"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"day-table-3","dir":"Articles","previous_headings":"Tables","what":"14-day table","title":"COVID Visualizations (COVIS)","text":"","code":"df_both |>   filter(date <= sunday_date) |>   table_10incidence(time_step = 14)"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"by-region-1","dir":"Articles","previous_headings":"Tables","what":"By Region","title":"COVID Visualizations (COVIS)","text":"","code":"for (r in unique(na.omit(df_both$who_region))) {   tab_out <- df_both %>%     filter(date <= sunday_date, who_region == r) |>     table_10incidence(region = r, data_as_of = format(Sys.Date(), \"%B %d, %Y\"))    print(htmltools::tagList(tab_out)) }"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"global-table-7d-and-28d-pct-change","dir":"Articles","previous_headings":"Tables","what":"Global table (7d and 28d pct change)","title":"COVID Visualizations (COVIS)","text":"","code":"df_both %>%   filter(date <= sunday_date, population >= 10000000) |>   table_10percentchange(data_as_of = format(sunday_date, \"%B %d, %Y\"))"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"global-table-14d-and-28d-pct-change","dir":"Articles","previous_headings":"Tables","what":"Global table (14d and 28d pct change)","title":"COVID Visualizations (COVIS)","text":"","code":"df_both %>%   filter(date <= sunday_date, population >= 10000000) |>   table_10percentchange(time_step = 14)"},{"path":"https://cdcgov.github.io/SaviR/articles/prod_sitrep.html","id":"regional-tables","dir":"Articles","previous_headings":"Tables","what":"Regional Tables","title":"COVID Visualizations (COVIS)","text":"","code":"for (r in unique(na.omit(df_both$who_region))) {   tab_out <- df_both %>%     filter(date <= sunday_date, population >= 100000, who_region == r) |> # Exclude population less than 100,000     table_10percentchange(region = r, data_as_of = format(sunday_date, \"%B %d, %Y\"))         print(htmltools::tagList(tab_out)) }"},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"SaviR Version 0.2 API Changes","text":"SaviR version 0.2 brings major revisions SaviR API design; complementary breaking. ’ll highlight .","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"black-box-warning","dir":"Articles","previous_headings":"Standardization of geography columns across datasets","what":"Black box warning","title":"SaviR Version 0.2 API Changes","text":"pretty substantial impact products, likely break existing downstream code…","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"motivation","dir":"Articles","previous_headings":"Standardization of geography columns across datasets","what":"Motivation","title":"SaviR Version 0.2 API Changes","text":"data pull functions use different naming schemes ISO country codes country names. ’s never apparent column join , joining, ’s difficult reason came . ’m attempting standardize ISO code columns either iso2code id (iso3code) depending value. guesswork involved joining disparate datasets (’s always id iso2code, join without specifying argument).","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"owid_testing_meta-get_owid_testing_meta","dir":"Articles","previous_headings":"Standardization of geography columns across datasets > Impact","what":"owid_testing_meta, get_owid_testing_meta()","title":"SaviR Version 0.2 API Changes","text":"iso_code -> id","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"get_testing-and-all-inner-functions","dir":"Articles","previous_headings":"Standardization of geography columns across datasets > Impact","what":"get_testing() (and all inner functions)","title":"SaviR Version 0.2 API Changes","text":"iso_code -> id","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"get_covid_df","dir":"Articles","previous_headings":"Standardization of geography columns across datasets > Impact","what":"get_covid_df()","title":"SaviR Version 0.2 API Changes","text":"country_code -> iso2code provided onetable, get_covid_df() never used without joining metadata table","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"get_vax-get_vax_manufacturers","dir":"Articles","previous_headings":"Standardization of geography columns across datasets > Impact","what":"get_vax(), get_vax_manufacturers()","title":"SaviR Version 0.2 API Changes","text":"iso_code -> id Still ideal, apparent column comes URL get_vax_manufacturers() changed","code":"onetable #> # A tibble: 237 × 10 #>    id    iso2code state_region   who_r…¹ who_r…² who_c…³ incom…⁴ popul…⁵ eight…⁶ #>    <chr> <chr>    <chr>          <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl> #>  1 ABW   AW       NA             AMRO    Americ… Aruba   High i…  1.06e5  8.49e4 #>  2 AFG   AF       South and Cen… EMRO    Easter… Afghan… Low in…  4.11e7  2.04e7 #>  3 AGO   AO       Sub-Saharan A… AFRO    Africa  Angola  Lower …  3.56e7  1.72e7 #>  4 AIA   AI       NA             AMRO    Americ… Anguil… NA       1.59e4  1.26e4 #>  5 ALB   AL       Europe and Eu… EURO    Europe  Albania Upper …  2.84e6  2.28e6 #>  6 AND   AD       Europe and Eu… EURO    Europe  Andorra High i…  7.98e4  6.72e4 #>  7 ARE   AE       Near East (Mi… EMRO    Easter… United… High i…  9.44e6  7.80e6 #>  8 ARG   AR       Western Hemis… AMRO    Americ… Argent… Upper …  4.55e7  3.29e7 #>  9 ARM   AM       Europe and Eu… EURO    Europe  Armenia Upper …  2.78e6  2.11e6 #> 10 ASM   AS       NA             WPRO    Wester… Americ… Upper …  4.43e4  3.00e4 #> # … with 227 more rows, 1 more variable: geometry <MULTIPOLYGON [m]>, and #> #   abbreviated variable names ¹​who_region, ²​who_region_desc, ³​who_country, #> #   ⁴​incomelevel_value, ⁵​population, ⁶​eighteenplus head(get_covid_df()) #> # A tibble: 6 × 8 #>   date       iso2code country             new_c…¹ cumul…² new_d…³ cumul…⁴ source #>   <date>     <chr>    <chr>                 <dbl>   <dbl>   <dbl>   <dbl> <chr>  #> 1 2020-01-03 AD       Andorra                   0       0       0       0 WHO    #> 2 2020-01-03 AE       United Arab Emirat…       0       0       0       0 WHO    #> 3 2020-01-03 AF       Afghanistan               0       0       0       0 WHO    #> 4 2020-01-03 AG       Antigua and Barbuda       0       0       0       0 WHO    #> 5 2020-01-03 AI       Anguilla                  0       0       0       0 WHO    #> 6 2020-01-03 AL       Albania                   0       0       0       0 WHO    #> # … with abbreviated variable names ¹​new_cases, ²​cumulative_cases, ³​new_deaths, #> #   ⁴​cumulative_deaths head(get_vax()) #> # A tibble: 6 × 17 #>   owid_country id    date       total_…¹ peopl…² peopl…³ total…⁴ daily…⁵ daily…⁶ #>   <chr>        <chr> <date>        <dbl>   <dbl>   <dbl>   <dbl>   <int>   <int> #> 1 Aruba        ABW   2021-03-29    25766   15600   10166      NA      NA      NA #> 2 Aruba        ABW   2021-03-30    25766   15600   10166      NA      NA    1278 #> 3 Aruba        ABW   2021-03-31    25766   15600   10166      NA      NA    1278 #> 4 Aruba        ABW   2021-04-01    25766   15600   10166      NA      NA    1278 #> 5 Aruba        ABW   2021-04-02    25766   15600   10166      NA      NA    1278 #> 6 Aruba        ABW   2021-04-03    25766   15600   10166      NA      NA    1278 #> # … with 8 more variables: total_vaccinations_per_hundred <dbl>, #> #   people_vaccinated_per_hundred <dbl>, #> #   people_fully_vaccinated_per_hundred <dbl>, #> #   total_boosters_per_hundred <dbl>, daily_vaccinations_per_million <int>, #> #   daily_people_vaccinated <int>, daily_people_vaccinated_per_hundred <dbl>, #> #   daily_vaccinations_per_hundred <dbl>, and abbreviated variable names #> #   ¹​total_vaccinations, ²​people_vaccinated, ³​people_fully_vaccinated, …"},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"new-starting-block-function-get_combined_table","dir":"Articles","previous_headings":"","what":"New “Starting Block” function get_combined_table()","title":"SaviR Version 0.2 API Changes","text":"Many scripts accomplished task differently, never clear exactly pull join data together. one forced use , now automated way : Pull metadata, case + death data, vaccine data Join together Filter source, + JHU source Keep (remove) geometry column mapping get_combined_table() takes two arguments: type: one “” “”, based source ’d like geometry: TRUE/FALSE (default:TRUE) based whether ’d like geometry .","code":"who_data <- get_combined_table(\"WHO\") # is identical to the following sequence: # (which still works, but is unnecessary) # onetable %>% #   select(-geometry) %>% # In the case that geometry = FALSE #   right_join(get_covid_df(), by = \"iso2code\") %>% #   filter(source == \"WHO\") %>% # In the case of type = \"WHO\" #   # filter(!(country == \"China\" & source == \"WHO\")) %>% # In the case of type = \"Both\" #   calc_add_risk() %>% #   left_join(get_vax(), by = c(\"id\", \"date\"))  head(who_data) #> # A tibble: 6 × 56 #>   id    iso2code state_region who_region who_r…¹ who_c…² incom…³ popul…⁴ eight…⁵ #>   <chr> <chr>    <chr>        <chr>      <chr>   <chr>   <chr>     <dbl>   <dbl> #> 1 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> 2 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> 3 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> 4 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> 5 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> 6 ABW   AW       NA           AMRO       Americ… Aruba   High i…  106445   84909 #> # … with 47 more variables: date <date>, country <chr>, new_cases <int>, #> #   cumulative_cases <int>, new_deaths <int>, cumulative_deaths <int>, #> #   source <chr>, new_cases_copy <dbl>, new_deaths_copy <dbl>, #> #   cumulative_cases_copy <dbl>, cumulative_deaths_copy <dbl>, weekdate <date>, #> #   new_cases_7dav <dbl>, new_deaths_7dav <dbl>, daily_case_incidence <dbl>, #> #   daily_death_incidence <dbl>, week_case <dbl>, prev_week_case <dbl>, #> #   prev_4week_case <dbl>, week_death <dbl>, prev_week_death <dbl>, …"},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"vaccine-carry-forward","dir":"Articles","previous_headings":"","what":"Vaccine carry-forward","title":"SaviR Version 0.2 API Changes","text":"running issues vaccination data sometimes carried forward, always. Since generally behavior want, ’ve applied within SaviR using new function, calc_vax_carryforward()","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"calc_vax_carryforward","dir":"Articles","previous_headings":"Vaccine carry-forward","what":"calc_vax_carryforward()","title":"SaviR Version 0.2 API Changes","text":"function used internally get_vax() get_combined_table() carry-forward following columns: total_vaccinations people_vaccinated people_fully_vaccinated total_boosters total_vaccinations_per_hundred people_vaccinated_per_hundred people_fully_vaccinated_per_hundred total_boosters_per_hundred Passing columns calc_vax_carryforward overrides behavior, isn’t presently need .","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/savir_version_0.2_api_changes.html","id":"get_vax_dates","dir":"Articles","previous_headings":"Vaccine carry-forward","what":"get_vax_dates()","title":"SaviR Version 0.2 API Changes","text":"vaccine data carried-forward, old way computing date vaccine data last updated longer possible. Instead, ’ve created function computes dates automatically, get_vax_dates() get_vax_dates() takes arguments, returns data frame 1 row per country detailing vaccine metric last updated.","code":"vax_dates <- get_vax_dates()  head(vax_dates) #>    owid_country  id total_doses_date partial_date fully_date booster_date #> 1:  Afghanistan AFG       2023-03-19   2023-03-19 2023-03-19   2023-03-19 #> 2:      Albania ALB       2023-02-05   2023-02-05 2023-02-05   2023-02-05 #> 3:      Algeria DZA       2022-09-04   2022-09-04 2022-09-04   2022-09-04 #> 4:      Andorra AND       2023-01-29   2023-01-29 2023-01-29   2023-01-29 #> 5:       Angola AGO       2023-03-12   2023-03-12 2023-03-12   2023-03-12 #> 6:     Anguilla AIA       2023-03-03   2023-02-10 2023-02-10   2023-03-03"},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Dynamic data source selection for testing data","text":"two main sources testing data use: World Data (OWID) FIND. compiling data various sources put together datasets. Briefly, information tests can used several different ways: tests per 1000 persons population (relevant assessing whether surveillance sufficient) test positivity rate (positive samples divided number tests time period), variations , tests per case. Note World Data longer updating June 23, 2022! Therefore, methods apply historical data data sources, prospective data, functions return data FIND. purpose document give explanation two datasets approaches taken extracting relevant metrics source various projects. Briefly, country look back 14 days find recent 7-day average new daily tests per 1K persons recent test positivity rate (7-day number positives cases divided 7-day number tests). document countries recent data; also document countries recent data quality flag due FIND OWID reporting irregularities numbers (e.g., total number tests decreasing suddenly jumping large amount).","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"getting-started-with-the-testing-data","dir":"Articles","previous_headings":"","what":"Getting started with the testing data","title":"Dynamic data source selection for testing data","text":"directly get dataset countries data preferred source based flags described detail : get_testing() uses SaviR functions get_testing_long() get_preferred_testpos7() hood. means preferred source selected based flags applied test numbers test positivity. addition, can pull data sources directly: get preferred data source country date directly, using test numbers test positivity lagged seven days observation date: just using test numbers past 14 days: can also change date lookback flags applied using argument last_X_days change maximum date return data using analysis_date: filter testing_long data preferred source recent 7 days data country: generate metrics get_testing given preferred source information generated either get_preferred_testpos7 get_preferred_tests_14.","code":"testing_processed <- get_testing() testing_processed ## # A tibble: 37,981 × 5 ##    id    date       new_tests_smoothed_per_thousand new_tests_smoothed…¹ posit…² ##    <chr> <date>                               <dbl>                <dbl>   <dbl> ##  1 ALB   2020-01-22                              NA                   NA      NA ##  2 AUT   2020-01-22                              NA                   NA      NA ##  3 AZE   2020-01-22                              NA                   NA      NA ##  4 BEL   2020-01-22                              NA                   NA      NA ##  5 BGR   2020-01-22                              NA                   NA      NA ##  6 BIH   2020-01-22                              NA                   NA      NA ##  7 CHL   2020-01-22                              NA                   NA      NA ##  8 COL   2020-01-22                              NA                   NA      NA ##  9 CZE   2020-01-22                              NA                   NA      NA ## 10 ESP   2020-01-22                              NA                   NA      NA ## # … with 37,971 more rows, and abbreviated variable names ## #   ¹​new_tests_smoothed_per_thousand_14, ²​positive_rate testing_long <- get_testing_long() testing_long ## # A tibble: 415,355 × 38 ##    data_source id    date       popula…¹ total…² new_t…³ total…⁴ new_t…⁵ new_t…⁶ ##    <chr>       <chr> <date>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 FIND        AFG   2020-01-22 38928000      NA      NA      NA      NA      NA ##  2 FIND        AFG   2020-01-23 38928000      NA      NA      NA      NA      NA ##  3 FIND        AFG   2020-01-24 38928000      NA      NA      NA      NA      NA ##  4 FIND        AFG   2020-01-25 38928000      NA      NA      NA      NA      NA ##  5 FIND        AFG   2020-01-26 38928000      NA      NA      NA      NA      NA ##  6 FIND        AFG   2020-01-27 38928000      NA      NA      NA      NA      NA ##  7 FIND        AFG   2020-01-28 38928000      NA      NA      NA      NA      NA ##  8 FIND        AFG   2020-01-29 38928000      NA      NA      NA      NA      NA ##  9 FIND        AFG   2020-01-30 38928000      NA      NA      NA      NA      NA ## 10 FIND        AFG   2020-01-31 38928000      NA      NA      NA      NA      NA ## # … with 415,345 more rows, 29 more variables: new_tests_daily7_prev <dbl>, ## #   new_tests_daily7_per_1k <dbl>, new_tests_daily7_per_1k_prev <dbl>, ## #   new_tests_daily14 <dbl>, new_tests_daily14_prev <dbl>, ## #   new_tests_daily14_per_1k <dbl>, new_tests_daily14_per_1k_prev <dbl>, ## #   new_cases_original <dbl>, new_cases_daily7 <dbl>, new_cases_daily14 <dbl>, ## #   positive_rate_7day <dbl>, positive_rate_7day_prev <dbl>, ## #   FLAG_negative_tests_7day <dbl>, FLAG_negative_tests_14day <dbl>, … preferred_source <- get_preferred_testpos7(testing_long) preferred_source ## # A tibble: 199 × 58 ##    id    preferred_…¹ preferre…² posit…³ posit…⁴ new_t…⁵ new_t…⁶ new_t…⁷ new_t…⁸ ##    <chr> <chr>        <date>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 AFG   NA           NA         NA      NA          NA      NA   NA      NA     ##  2 AGO   NA           NA         NA      NA          NA      NA   NA      NA     ##  3 AIA   NA           NA         NA      NA          NA      NA   NA      NA     ##  4 ALB   FIND         2023-03-09  0.0242  0.0284    289.    317.   0.101   0.110 ##  5 AND   NA           NA         NA      NA          NA      NA   NA      NA     ##  6 ARE   NA           NA         NA      NA          NA      NA   NA      NA     ##  7 ARG   NA           NA         NA      NA          NA      NA   NA      NA     ##  8 ARM   NA           NA         NA      NA          NA      NA   NA      NA     ##  9 ATG   NA           NA         NA      NA          NA      NA   NA      NA     ## 10 AUS   NA           NA         NA      NA          NA      NA   NA      NA     ## # … with 189 more rows, 49 more variables: flag_negative_tests_previous7 <dbl>, ## #   flag_increase_tests_previous7 <dbl>, flag_negative_cases_previous7 <dbl>, ## #   owid_date <date>, owid_new_cases <dbl>, owid_new_cases_daily7 <dbl>, ## #   owid_total_tests_orig <dbl>, owid_total_tests_int <dbl>, ## #   owid_new_tests_orig <dbl>, owid_new_tests_int <dbl>, ## #   owid_tests_daily7 <dbl>, owid_tests_daily7_prev <dbl>, ## #   owid_tests_daily7_1k <dbl>, owid_tests_daily7_1k_prev <dbl>, … preferred_source_14 <- get_preferred_tests14(testing_long) preferred_source_custom <-   get_preferred_testpos7(testing_long, last_X_days = 10, analysis_date = as.Date(\"2021-03-01\")) preferred_testing <-   testing_long %>%   left_join(preferred_source %>%              select(id, preferred_source), by = \"id\") %>%   filter(data_source == preferred_source) preferred_testing ## # A tibble: 37,981 × 39 ##    data_source id    date       popula…¹ total…² new_t…³ total…⁴ new_t…⁵ new_t…⁶ ##    <chr>       <chr> <date>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 FIND        ALB   2020-01-22  2878000      NA      NA      NA      NA      NA ##  2 FIND        ALB   2020-01-23  2878000      NA      NA      NA      NA      NA ##  3 FIND        ALB   2020-01-24  2878000      NA      NA      NA      NA      NA ##  4 FIND        ALB   2020-01-25  2878000      NA      NA      NA      NA      NA ##  5 FIND        ALB   2020-01-26  2878000      NA      NA      NA      NA      NA ##  6 FIND        ALB   2020-01-27  2878000      NA      NA      NA      NA      NA ##  7 FIND        ALB   2020-01-28  2878000      NA      NA      NA      NA      NA ##  8 FIND        ALB   2020-01-29  2878000      NA      NA      NA      NA      NA ##  9 FIND        ALB   2020-01-30  2878000      NA      NA      NA      NA      NA ## 10 FIND        ALB   2020-01-31  2878000      NA      NA      NA      NA      NA ## # … with 37,971 more rows, 30 more variables: new_tests_daily7_prev <dbl>, ## #   new_tests_daily7_per_1k <dbl>, new_tests_daily7_per_1k_prev <dbl>, ## #   new_tests_daily14 <dbl>, new_tests_daily14_prev <dbl>, ## #   new_tests_daily14_per_1k <dbl>, new_tests_daily14_per_1k_prev <dbl>, ## #   new_cases_original <dbl>, new_cases_daily7 <dbl>, new_cases_daily14 <dbl>, ## #   positive_rate_7day <dbl>, positive_rate_7day_prev <dbl>, ## #   FLAG_negative_tests_7day <dbl>, FLAG_negative_tests_14day <dbl>, … testing_cleaned <-   preferred_testing %>%   group_by(id) %>%   arrange(date) %>%   mutate(     new_cases_daily7 = zoo::na.locf(new_cases_daily7, na.rm = F, maxgap = 14),     new_tests_daily7 = zoo::na.locf(new_tests_daily7, na.rm = F, maxgap = 14) ,     new_tests_smoothed_per_thousand = zoo::na.locf(new_tests_daily7_per_1k, na.rm = F, maxgap = 14),     positive_rate = zoo::na.locf(positive_rate_7day, na.rm = F, maxgap = 14)     ) %>%   ungroup()"},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"quality-and-availability-of-data-by-source-and-country","dir":"Articles","previous_headings":"","what":"Quality and availability of data by source and country","title":"Dynamic data source selection for testing data","text":"Looking data source preferred time country historically:  countries switching data sets countries data either missing data sources failed quality flags. Looking flags time (focusing flags used get_preferred_testpos7:  Overall days countries fail quality flags either dataset (failures flag 7 day cases). Looking flags time & country (plots white indicates missing grey indicates NA value):","code":"# taking a look at slice of historical data ytd <- seq.Date(as.Date(\"2022-03-01\"),                  as.Date(\"2022-06-09\"), by = 1)  preferred_timeseries <-   purrr::map_dfr(     ytd,      ~get_preferred_testpos7(testing_long, analysis_date = .x) %>%      mutate(analysis_date = .x)   ) %>%   left_join(select(SaviR::onetable, id, who_region, who_country)) ## Joining with `by = join_by(id)` preferred_timeseries %>%   filter(!is.na(who_region)) %>%   ggplot(aes(y = who_country, x = analysis_date, fill = preferred_source)) +   geom_tile() +   scale_fill_brewer(palette = \"Set1\", na.value = \"darkgrey\", name = \"Preferred\\nsource\") +   theme(axis.text.y = element_text(size = 6)) +   facet_grid(who_region ~ ., scales = \"free_y\", space = \"free_y\") test_flags_recent <-   testing_long %>%      left_join(select(SaviR::onetable, id, who_region, who_country)) %>%     filter(date > \"2022-01-01\") %>%     select(data_source, id, who_region, who_country, date, starts_with(\"FLAG\")) %>%      tidyr::pivot_longer(starts_with(\"FLAG\")) ## Joining with `by = join_by(id)` test_flags_recent %>%   filter(name %in% c(\"FLAG_increase_tests_7day\", \"FLAG_negative_tests_7day\", \"FLAG_negative_cases_7day\")) %>%   group_by(date, data_source, name, who_region) %>%   summarize(n_countries_flagged = sum(value %in% 1)) %>%   ggplot() +   geom_col(aes(x = date, y = n_countries_flagged, fill = who_region), width = 0.2,             position = \"stack\") +   facet_grid(data_source ~ name) ## `summarise()` has grouped output by 'date', 'data_source', 'name'. You can ## override using the `.groups` argument. c(\"FLAG_increase_tests_7day\", \"FLAG_negative_tests_7day\") %>%   purrr::set_names() %>%   purrr::map(       ~test_flags_recent %>%          filter(name %in% .x, !is.na(who_region)) %>%         ggplot(aes(x = date, y = who_country, fill = factor(value))) +         geom_tile() +         scale_fill_brewer(palette = \"Dark2\", labels = c(\"Passed\", \"Failed\"),                            na.value = \"darkgrey\", name = \"Quality flag\") +         labs(x = \"Country\", y = \"Date\",               title = .x) +         facet_grid(who_region ~ data_source, scales = \"free_y\", space = \"free_y\") +         theme(axis.text.y = element_text(size = 8))   )"},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"summary-of-testing-data-processing","dir":"Articles","previous_headings":"","what":"Summary of testing data processing","title":"Dynamic data source selection for testing data","text":"data source, following: interpolate cumulative number tests, calculate new daily tests 7-day average new daily tests based interpolated metric. maximum number days allow two cumulative testing values interpolation 31 days(note can changed param find_maxgap `get_testing_long). Test positivity based ratio 7-day average new daily cases (JHU) 7-day average new daily tests. FIND scrapes websites testing data sources daily given date, thus original source update, scraped value . precise, scraped cumulative test number changed subsequent days, interpret update number tests (, original value FIND provided “new tests” 0). interpolate consistent manner across two datasets, first consider update occurred cumulative testing number actually changed. values recorded 90, 100, 100, 100, 100, 200 Sunday Friday, respectively, interpolated series 90, 100, 125, 150, 175, 200. handful countries,OWID able get test positivity rate directly source number tests, use pre-computed value positivity rate cases may reliable. data source, extract recent available data point past 14 days 7-day average new daily tests per 1000 test positivity rate. flag data point 7 days used calculation drop total number tests, sudden increase number tests suggesting reporting anomaly (currently set 5% daily increase interpolated number total tests), decrease total number cases (exceptions small number countries OWID test positivity rate based number). examine countries recent data points (last 14 days) quality flags. Among countries, country/area data points FIND OWID, select OWID. country data, none pass quality flags, preferred data source set NA. report recent values country/area along preferred data source. Note , ’s plausible one week next, preferred data source country shift FIND OWID.","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"more-details-on-flags","dir":"Articles","previous_headings":"Summary of testing data processing","what":"More details on flags","title":"Dynamic data source selection for testing data","text":"mentioned, attempt flag following instances implausibility prevent bad quality data reported: Flag negative values new daily cases: total cases drop (perhaps due revision) 7 days used calculation test positivity rate? , flag country/area, calculation test positivity impacted erroneous calculation denominator. Note impacts risk matrix approach, look test positivity. Furthermore, countries OWID, use flag , test positivity rate calculated JHU case data, rather taken directly source providing number tests. Note currently, flags generated FIND variable. dataset reports new_cases_orig variable appears never negative – likely handling negative values FIND including . investigate consider whether import JHU case data separately, can generate create adjustments new cases. Flag drops cumulative number tests: total number tests drop (perhaps due revision) 7 14 days used calculations metrics? , flag values. Flag implausible increase total number tests: total tests increase dramatic amount since last update? may reflect either considerable delay since last update cumulative tests reported, due substantial dumping tests previously reported, issue scraper. flag requires fine-tuning, tentatively flag greater 5% increase cumulative tests day 7 14 days used calculation, linearly interpolating dates updates. can changed flag_test_increase parameter function get_testing_long.","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"owid","dir":"Articles","previous_headings":"More details on OWID and FIND sources","what":"OWID","title":"Dynamic data source selection for testing data","text":"large benefit OWID data detailed methodology listed website published research. See article Scientific Data (Nature): https://www.nature.com/articles/s41597-020-00688-8 See detailed description issues play well detailed description current methodology: https://ourworldindata.org/coronavirus-testing data can accessed : https://github.com/owid/covid-19-data/commits/master/public/data/testing Note appears testing-specific dataset covid-testing-.csv may slightly date full COVID-19 dataset, owid-covid-data.csv Key features data: Updated twice week – look GitHub commit history check recent updates. OWID explicitly states whether data based number tests number individuals. metadata website states additional information – kinds tests included (e.g., PCR PCR + Rapid). scrape metadata function get_owid_metadata. main data input cumulative number tests performed, time series new daily tests number countries like Sweden France (whichever provided). Scientific Data paper, “source provides complete time series daily tests, derive additional cumulative series simple running total raw daily data. source provides cumulative figures, derive additional daily series day--day change observed consecutive observations.” cumulative value may updated daily – depends (1) country updating (2) OWID’s report frequency. historical time series made available, OWID scan twice week obtain cumulative test information. example, Dominican Republic reported 2021/08/09 2021/08/16 cumulative number tests 1,875,579 1,910,033, respectively, values dates (NAs). likely website updating cumulative number daily. purposes calculating variable new tests performed given day (7-day average, smoothed), OWID methodology assumes number tests added equal among days . codebook: “New tests COVID-19 (7-day smoothed). countries don’t report testing data daily basis, assume testing changed equally daily basis periods data reported. produces complete series daily figures, averaged rolling 7-day window” example, Dominican Republic, 6 days 2021/08/09 2021/08/16 assumed add (1,910,033 - 1,875,579)/7 = 4,922 tests previous day’s total. new tests (smoothed 7-day average) based values – example, 2021/08/16, value 4,922 tests.","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"find","dir":"Articles","previous_headings":"More details on OWID and FIND sources","what":"FIND","title":"Dynamic data source selection for testing data","text":"FIND data less detailed documentation methods – essentially relegated code, can difficult follow. data can accessed following sources: Website visualizations, links dataset bottom: https://www.finddx.org/covid-19/test-tracker/ Github process description: https://github.com/dsbbfinddx/FINDCov19TrackerData FIND contains descriptions individual countries, notes sample types : https://github.com/dsbbfinddx/FINDCov19TrackerData/blob/master/processed/unit_info.csv Codebook: https://github.com/dsbbfinddx/FINDCov19TrackerData/blob/master/processed/codebook.csv Main dataset original smoothed values testing data: https://github.com/dsbbfinddx/FINDCov19TrackerData/blob/master/processed/data_all.csv Additional dataset original corrected values, used countries sudden drops number tests: https://github.com/dsbbfinddx/FINDCov19TrackerData/blob/master/processed/coronavirus_tests.csv Key features data: Updated daily (possibly multiple times per day). Check GitHub commit history updates. key data point cumulative tests date – scraped various websites (automatic, manual). cumulative value scraped website Friday morning Saturday morning, recorded file, date associated cumulative numbers Friday Saturday. measure daily new tests based difference 0 (used, without kind smoothing 7-day averaging). data files include original data series, “corrected” series attempts adjust large adjustments data series, smoothed version. ’s unclear methodology , exactly, although details code. response question follows: “method fails recreate actual numbers _orig columns represent data reported countries date. Sometimes, countries report lower cumulative number tests compared value past, creates negative new_tests result. added _corrected columns file . However many countries reporting frequently expected, still creating gaps time series, decided smooth result applying 7-day average, filling gaps recent reported cumulative values. function can found .” example similar , whereas Dominican Republic blank days 2021/08/10 2021/08/15 OWID, filled FIND. case, values 2021/08/09 2021/08/16 match OWID FIND. general, appears test positivity measure provide based smoothed versions new tests last week, 7-day average new cases last week (taken JHU). dataset, all_new_test divided all_new_cases. summarize, 3 basic series provided FIND: Original: scraping total cumulative tests. Corrected: handling sudden negative revisions drops particular way. Unclear exact details. Smoothed: Unclear exact details, least sometimes 7-day average, based corrected values. SaviR functions work original values FIND reports, use quality flags, summarized test metrics, linear interpolation OWID (using maximum gaps 31 days).","code":""},{"path":"https://cdcgov.github.io/SaviR/articles/testing_demo.html","id":"appendix-checking-functions-to-make-sure-they-return-the-data-even-when-owid-switches-off","dir":"Articles","previous_headings":"","what":"Appendix: checking functions to make sure they return the data even when OWID switches off","title":"Dynamic data source selection for testing data","text":"Checking functions make sure return data even OWID data stops updated:   sequence functions: just using test numbers past 14 days:","code":"# same as function in pkg except passing through testing_long get_testing_mod <- function (testing_long,                              analysis_date = Sys.Date() - 1L) {     preferred <- get_preferred_testpos7(testing_long, last_X_days = 14,          analysis_date = analysis_date)     preferred_long <- testing_long %>% left_join(preferred %>%          select(id, preferred_source), by = \"id\") %>% filter(data_source ==          preferred_source)     preferred_long_locf <-        preferred_long %>%         group_by(id) %>%         arrange(date) %>%         mutate(new_tests_smoothed_per_thousand = zoo::na.locf(new_tests_daily7_per_1k,           na.rm = F, maxgap = 14         ), new_tests_smoothed_per_thousand_14 = zoo::na.locf(new_tests_daily14_per_1k,           na.rm = F, maxgap = 14         ), positive_rate = zoo::na.locf(positive_rate_7day,           na.rm = F, maxgap = 14         )) %>%         ungroup(.) %>%         select(           id,           date, new_tests_smoothed_per_thousand, new_tests_smoothed_per_thousand_14,           positive_rate, data_source         )     return(preferred_long_locf) }  # seems to work with just the  check_test <-   testing_long %>%   filter(data_source == \"FIND\" | (data_source == \"OWID\" & date <= \"2022-06-01\")) %>%   get_testing_mod()   check_test %>%   ggplot(aes(x = date, y = id, fill = new_tests_smoothed_per_thousand)) +   geom_tile() check_test %>%   ggplot(aes(x = date, y = id, fill = data_source)) +   geom_tile() preferred_source <-    get_preferred_testpos7(     testing_long %>%     filter(data_source == \"FIND\" | (data_source == \"OWID\" & date <= \"2022-06-01\"))   ) preferred_source ## # A tibble: 199 × 58 ##    id    preferred_…¹ preferre…² posit…³ posit…⁴ new_t…⁵ new_t…⁶ new_t…⁷ new_t…⁸ ##    <chr> <chr>        <date>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 AFG   NA           NA         NA      NA          NA      NA   NA      NA     ##  2 AGO   NA           NA         NA      NA          NA      NA   NA      NA     ##  3 AIA   NA           NA         NA      NA          NA      NA   NA      NA     ##  4 ALB   FIND         2023-03-09  0.0242  0.0284    289.    317.   0.101   0.110 ##  5 AND   NA           NA         NA      NA          NA      NA   NA      NA     ##  6 ARE   NA           NA         NA      NA          NA      NA   NA      NA     ##  7 ARG   NA           NA         NA      NA          NA      NA   NA      NA     ##  8 ARM   NA           NA         NA      NA          NA      NA   NA      NA     ##  9 ATG   NA           NA         NA      NA          NA      NA   NA      NA     ## 10 AUS   NA           NA         NA      NA          NA      NA   NA      NA     ## # … with 189 more rows, 49 more variables: flag_negative_tests_previous7 <dbl>, ## #   flag_increase_tests_previous7 <dbl>, flag_negative_cases_previous7 <dbl>, ## #   owid_date <date>, owid_new_cases <dbl>, owid_new_cases_daily7 <dbl>, ## #   owid_total_tests_orig <dbl>, owid_total_tests_int <dbl>, ## #   owid_new_tests_orig <dbl>, owid_new_tests_int <dbl>, ## #   owid_tests_daily7 <dbl>, owid_tests_daily7_prev <dbl>, ## #   owid_tests_daily7_1k <dbl>, owid_tests_daily7_1k_prev <dbl>, … get_preferred_tests14(   testing_long %>%     filter(data_source == \"FIND\" | (data_source == \"OWID\" & date <= \"2022-06-01\")) ) ## # A tibble: 195 × 39 ##    id    preferred_…¹ preferre…² new_t…³ new_t…⁴ new_t…⁵ new_t…⁶ flag_…⁷ flag_…⁸ ##    <chr> <chr>        <date>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 AFG   NA           NA             NA      NA  NA       NA          NA      NA ##  2 AGO   NA           NA             NA      NA  NA       NA          NA      NA ##  3 ALB   FIND         2023-03-22    274.    306.  0.0952   0.106       0       0 ##  4 AND   NA           NA             NA      NA  NA       NA          NA      NA ##  5 ARE   NA           NA             NA      NA  NA       NA          NA      NA ##  6 ARG   NA           NA             NA      NA  NA       NA          NA      NA ##  7 ARM   NA           NA             NA      NA  NA       NA          NA      NA ##  8 ATG   NA           NA             NA      NA  NA       NA          NA      NA ##  9 AUS   NA           NA             NA      NA  NA       NA          NA      NA ## 10 AUT   FIND         2023-03-22  23547.  33203.  2.61     3.69        0       0 ## # … with 185 more rows, 30 more variables: owid_date <date>, ## #   owid_total_tests_orig <dbl>, owid_total_tests_int <dbl>, ## #   owid_new_tests_orig <dbl>, owid_new_tests_int <dbl>, ## #   owid_tests_daily14 <dbl>, owid_tests_daily14_prev <dbl>, ## #   owid_tests_daily14_1k <dbl>, owid_tests_daily14_1k_prev <dbl>, ## #   owid_flag_negative_tests <dbl>, owid_flag_increase_tests <dbl>, ## #   owid_flag_negative_tests_prev14 <dbl>, … testing_long %>%   filter(data_source == \"FIND\" | (data_source == \"OWID\" & date <= \"2022-06-01\")) %>%   left_join(preferred_source %>%              select(id, preferred_source), by = \"id\") %>%   filter(data_source == preferred_source) ## # A tibble: 37,981 × 39 ##    data_source id    date       popula…¹ total…² new_t…³ total…⁴ new_t…⁵ new_t…⁶ ##    <chr>       <chr> <date>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ##  1 FIND        ALB   2020-01-22  2878000      NA      NA      NA      NA      NA ##  2 FIND        ALB   2020-01-23  2878000      NA      NA      NA      NA      NA ##  3 FIND        ALB   2020-01-24  2878000      NA      NA      NA      NA      NA ##  4 FIND        ALB   2020-01-25  2878000      NA      NA      NA      NA      NA ##  5 FIND        ALB   2020-01-26  2878000      NA      NA      NA      NA      NA ##  6 FIND        ALB   2020-01-27  2878000      NA      NA      NA      NA      NA ##  7 FIND        ALB   2020-01-28  2878000      NA      NA      NA      NA      NA ##  8 FIND        ALB   2020-01-29  2878000      NA      NA      NA      NA      NA ##  9 FIND        ALB   2020-01-30  2878000      NA      NA      NA      NA      NA ## 10 FIND        ALB   2020-01-31  2878000      NA      NA      NA      NA      NA ## # … with 37,971 more rows, 30 more variables: new_tests_daily7_prev <dbl>, ## #   new_tests_daily7_per_1k <dbl>, new_tests_daily7_per_1k_prev <dbl>, ## #   new_tests_daily14 <dbl>, new_tests_daily14_prev <dbl>, ## #   new_tests_daily14_per_1k <dbl>, new_tests_daily14_per_1k_prev <dbl>, ## #   new_cases_original <dbl>, new_cases_daily7 <dbl>, new_cases_daily14 <dbl>, ## #   positive_rate_7day <dbl>, positive_rate_7day_prev <dbl>, ## #   FLAG_negative_tests_7day <dbl>, FLAG_negative_tests_14day <dbl>, …"},{"path":"https://cdcgov.github.io/SaviR/articles/testing_investigation.html","id":"testing-by-income-status","dir":"Articles","previous_headings":"","what":"Testing by Income Status","title":"Testing Data Investigation","text":"Aggregating Income Level Computing number jurisdictions reporting per day OWID turned testing data collection July.","code":"testing_by_income_14d <- testing_df %>%   left_join(distinct(onetable, id, incomelevel_value, state_region), by = \"id\") %>%   group_by(date, data_source, incomelevel_value) %>%   summarize(     n_reporting = sum(!new_tests_original %in% c(0, NA_real_)),     new_tests = sum(new_tests_original, na.rm = TRUE)   ) %>%   group_by(data_source, incomelevel_value) %>%   arrange(date) %>%   mutate(     n_reporting_14d = roll_median(n_reporting, n = 14, align = \"right\", na.rm = TRUE, fill = NA_real_),     new_tests_14d = roll_median(new_tests, n = 14, align = \"right\", na.rm = TRUE, fill = NA_real_)   ) %>%   ungroup() %>%   filter(     !incomelevel_value %in% c(\"Not classified\", NA_character_),     date >= \"2021-01-01\",     date <= sunday_date,   ) %>%   select(-new_tests, -n_reporting) %>%   pivot_longer(-date:-incomelevel_value) %>%   mutate(     name = case_when(       name == \"n_reporting_14d\" ~ \"Countries Reporting\",       name == \"new_tests_14d\" ~ \"New Tests Reported\"     ),     incomelevel_value = factor(       tools::toTitleCase(incomelevel_value),       levels = c(         \"Low Income\",         \"Lower Middle Income\",         \"Upper Middle Income\",         \"High Income\"       ),       ordered = TRUE     )   ) ## `summarise()` has grouped output by 'date', 'data_source'. You can override ## using the `.groups` argument. testing_by_income_plot <- ggplot(testing_by_income_14d, aes(x = date, y = value, color = name, linetype = data_source)) +   geom_line() +   facet_grid(name ~ incomelevel_value, scales = \"free_y\", switch = \"y\") +   scale_y_continuous(labels = scales::comma) +   scale_x_date(     date_labels = \"%b\\n%Y\"   ) +   labs(     title = \"COVID-19 Testing Data Reporting, by World Bank Income Level\",     subtitle = \"14-day median new tests reported and number of countries reporting\",     x = \"Date of Report\",     y = \"Value\",     color = \"Metric\",     linetype = \"Data Source\"   ) +   theme_bw() +    theme(     legend.position = \"bottom\"   )  testing_by_income_plot"},{"path":"https://cdcgov.github.io/SaviR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Browning. Author, maintainer. Kimberly Lockwood. Author. Nartlada Chantharojwong. Author. James Fuller. Author. Dante Bugli. Contributor. Randy Yee. Author.","code":""},{"path":"https://cdcgov.github.io/SaviR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Browning S, Lockwood K, Chantharojwong N, Fuller J, Yee R (2023). SaviR: ITF Situational Awareness Visualization. R package version 0.3.0, https://github.com/CDCgov/SaviR.","code":"@Manual{,   title = {SaviR: ITF Situational Awareness and Visualization},   author = {Sean Browning and Kimberly Lockwood and Nartlada Chantharojwong and James Fuller and Randy Yee},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/CDCgov/SaviR}, }"},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":null,"dir":"","previous_headings":"","what":"Creating a Culture of Innovation","title":"Creating a Culture of Innovation","text":"aspire create culture people work joyfully, communicate openly things matter, provide great services globally. like team communities (government private sector) reflect diversity kinds, just classes protected law. Diversity fosters innovation. Diverse teams creative teams. need diversity perspective create solutions challenges face. code conduct (adapted 18F’s Code Conduct). follow Equal Employment Opportunity laws expect everyone work adhere GSA Anti-harrasment Policy, even work Centers Disease Control Prevention GSA. expect every user follow code conduct laws policies mentioned .","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"be-empowering","dir":"","previous_headings":"","what":"Be Empowering","title":"Creating a Culture of Innovation","text":"Consider can encourage support others. Make room quieter voices contribute. Offer support enthusiasm great ideas. Leverage low cost experimentation support colleagues’ ideas, take care acknowledge original source. Look ways contribute collaborate, even situations normally wouldn’t. Share knowledge skills. Prioritize access input traditionally excluded civic process.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"rules-of-behavior","dir":"","previous_headings":"","what":"Rules of Behavior","title":"Creating a Culture of Innovation","text":"understand must complete security awareness records management training annually order comply latest security records management policies. understand must also follow Rules Behavior use HHS Information Resources understand must use, share, store kind sensitive data (health status, provision payment healthcare, PII, etc.) circumstance. knowingly conceal, falsify, remove information. understand can use non-sensitive /publicly available data. understand passwords create set accounts need comply CDC’s password policy. understand stewards reserves right moderate data time.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"boundaries","dir":"","previous_headings":"","what":"Boundaries","title":"Creating a Culture of Innovation","text":"Create boundaries behavior consider can create safe space helps prevent unacceptable behavior others. can’t list instances unacceptable behavior, can provide examples help guide community thinking respond experience types behavior, whether directed others. unsure something appropriate behavior, probably . person interact can define line . Impact matters intent. Ensuring behavior negative impact responsibility. Problems usually arise assume way thinking behavior norm everyone.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"here-are-some-examples-of-unacceptable-behavior","dir":"","previous_headings":"Boundaries","what":"Here are some examples of unacceptable behavior","title":"Creating a Culture of Innovation","text":"Negative offensive remarks based protected classes listed GSA Anti-harrasment Policy race, religion, color, sex, national origin, age, disability, genetric information, sexual orientation, gender identity, parental status, maritual status, political affiliation well gender expression, mental illness, socioeconomic status backgrounds, neuro()typicality, physical appearance, body size, clothing. Consider calling attention differences can feel alienating. Sustained disruption meetings, talks, discussions, including chatrooms. Patronizing language behavior. Aggresive behavior, unconstructive criticism, providing correction improve conversation (sometimes referred “well actually’s”), repeatedly interrupting talking someone else, feigning surprise someone’s lack knowledge awareness topic, subtle prejudice. Referring people way misidentifies gender /rejects validity gender identity; instance using incorrect pronouns forms address (misgendering). Retaliating anyone files formal complaint someone violated codes laws.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Creating a Culture of Innovation","text":"CDC Scientific Clearance process obtaining approvals appropriate CDC officials CDC information product released public CDC’s external public health partners. Information products require formal clearance include print, electronic, oral materials, CDC employees author co-author, whether published CDC outside CDC. CDC contractors developing content behalf CDC public CDC’s external public health partners also required put content formal clearance process. collaborative functions related projects include blogs, wikis, forums, bug tracking sites, source control others deemed necessary. individuals within CDC, adherence following policies required: * CDC “Clearance Information Products Disseminated Outside CDC Public Use” * HHS “Ensuring Quality Information Disseminated HHS agencies” collaborative materials controlled rules contained within document. allow real-time collaboration opportunities among CDC employees, CDC contractors CDC public health partners.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"credit","dir":"","previous_headings":"","what":"Credit","title":"Creating a Culture of Innovation","text":"code conduct mainly adapted 18F’s Code Conduct CDC’s Informatics Innovation Unit R&D Lab’s code conduct.","code":""},{"path":"https://cdcgov.github.io/SaviR/code-of-conduct.html","id":"relevant-legal-considerations","dir":"","previous_headings":"","what":"Relevant Legal Considerations","title":"Creating a Culture of Innovation","text":"Laws enforced Equal Employment Opportunity Commission Types discrimination prohibited law New proposed regulations","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"ITF Situational Awareness and Visualization","text":"purpose SaviR package collate data various publicly available Coronavirus 2019 (COVID-19) data sources analysis visualization. package divided two main sections: COVID Analytical Datasets (COVAD) COVID Data Visualizations (COVIS).","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"data-sources","dir":"","previous_headings":"Overview","what":"Data Sources","title":"ITF Situational Awareness and Visualization","text":"World Health Organization () - COVID-19 Cases Deaths (China data includes Taiwan, Hong Kong, Macua data) Johns Hopkins University (JHU) - COVID-19 Cases Deaths (China, Taiwan, Hong Kong, Macua data disaggregated) World Data (OWID) - COVID-19 Vaccines, Tests, Hospitalizations United Nations - Population Estimates World Bank - Country Income Classifications Note: Please refer original data sources ensure data accuracy data models changed","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"installation-and-package-load","dir":"","previous_headings":"","what":"Installation and Package Load","title":"ITF Situational Awareness and Visualization","text":"can install released version SaviR Github : can also use code update SaviR package needed. loading SaviR, sure load package last.","code":"devtools::install_github(\"CDCgov/SaviR\")"},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"covad---covid-analytical-datasets","dir":"","previous_headings":"Installation and Package Load","what":"COVAD - COVID Analytical Datasets","title":"ITF Situational Awareness and Visualization","text":"Metadata stored package can called:","code":"metadata <- onetable   country_coordinates <- country_coords"},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"public-domain-standard-notice","dir":"","previous_headings":"","what":"Public Domain Standard Notice","title":"ITF Situational Awareness and Visualization","text":"repository constitutes work United States Government subject domestic copyright protection 17 USC § 105. repository public domain within United States, copyright related rights work worldwide waived CC0 1.0 Universal public domain dedication. contributions repository released CC0 dedication. submitting pull request agreeing comply waiver copyright interest.","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"license-standard-notice","dir":"","previous_headings":"","what":"License Standard Notice","title":"ITF Situational Awareness and Visualization","text":"repository utilizes code licensed terms Apache Software License therefore licensed ASL v2 later. source code repository free: can redistribute /modify terms Apache Software License version 2, (option) later version. source code repository distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See Apache Software License details. received copy Apache Software License along program. , see http://www.apache.org/licenses/LICENSE-2.0.html source code forked open source projects inherit license.","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"privacy-standard-notice","dir":"","previous_headings":"","what":"Privacy Standard Notice","title":"ITF Situational Awareness and Visualization","text":"repository contains non-sensitive, publicly available data information. material community participation covered Disclaimer Code Conduct. information CDC’s privacy policy, please visit http://www.cdc.gov//privacy.html.","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"contributing-standard-notice","dir":"","previous_headings":"","what":"Contributing Standard Notice","title":"ITF Situational Awareness and Visualization","text":"Anyone encouraged contribute repository forking submitting pull request. (new GitHub, might start basic tutorial.) contributing project, grant world-wide, royalty-free, perpetual, irrevocable, non-exclusive, transferable license users terms Apache Software License v2 later. comments, messages, pull requests, submissions received CDC including GitHub page may subject applicable federal law, including limited Federal Records Act, may archived. Learn http://www.cdc.gov//privacy.html.","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"records-management-standard-notice","dir":"","previous_headings":"","what":"Records Management Standard Notice","title":"ITF Situational Awareness and Visualization","text":"repository source government records, copy increase collaboration collaborative potential. government records published CDC web site.","code":""},{"path":"https://cdcgov.github.io/SaviR/index.html","id":"additional-standard-notices","dir":"","previous_headings":"","what":"Additional Standard Notices","title":"ITF Situational Awareness and Visualization","text":"Please refer CDC’s Template Repository information contributing repository, public domain notices disclaimers, code conduct.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/bbox_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get bounding boxes for maps by WHO/DoS region — bbox_fun","title":"Function to get bounding boxes for maps by WHO/DoS region — bbox_fun","text":"Used internally viz_maps.R functions maps","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/bbox_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get bounding boxes for maps by WHO/DoS region — bbox_fun","text":"","code":"bbox_fun(region, df)"},{"path":"https://cdcgov.github.io/SaviR/reference/bbox_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get bounding boxes for maps by WHO/DoS region — bbox_fun","text":"vector class bbox (sf package) min max xy coordinates bounding box","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_add_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_add_risk — calc_add_risk","title":"calc_add_risk — calc_add_risk","text":"Calculate epi stats generalized df input.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_add_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_add_risk — calc_add_risk","text":"","code":"calc_add_risk(df)"},{"path":"https://cdcgov.github.io/SaviR/reference/calc_add_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_add_risk — calc_add_risk","text":"df Dataframe id, date, new_cases, new_deaths, cumulative_cases, cumulative_deaths, population.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_add_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_add_risk — calc_add_risk","text":"","code":"if (FALSE) { df <- onetable %>%   right_join(get_covid_df(), by = c(\"iso2code\")) %>%   filter(!(country == \"China\" & source == \"WHO\"))  calc_add_risk(df) }"},{"path":"https://cdcgov.github.io/SaviR/reference/calc_vax_carryforward.html","id":null,"dir":"Reference","previous_headings":"","what":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","title":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","text":"Carry-Forward vaccination metrics latest date","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_vax_carryforward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","text":"","code":"calc_vax_carryforward(df, ...)"},{"path":"https://cdcgov.github.io/SaviR/reference/calc_vax_carryforward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","text":"df (data.frame) Source data frame containing vaccine metrics get_vax() ... (optional) (un-)quoted column names carry forward. Overwrites standard variable set","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_vax_carryforward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","text":"df either columns ... carried forward, default set","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_vax_carryforward.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Carry-Forward vaccination metrics to latest date — calc_vax_carryforward","text":"default, function carries forward following (unless names passed ...): total_vaccinations people_vaccinated people_fully_vaccinated total_boosters total_vaccinations_per_hundred people_vaccinated_per_hundred people_fully_vaccinated_per_hundred total_boosters_per_hundred","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average incidence over a set day interval — calc_window_incidence","title":"Compute average incidence over a set day interval — calc_window_incidence","text":"Compute average incidence set day interval","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average incidence over a set day interval — calc_window_incidence","text":"","code":"calc_window_incidence(data, window = 7)"},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average incidence over a set day interval — calc_window_incidence","text":"data data.frame least date, id, new_cases, population columns compute incidence window numeric representing days compute average incidence ","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute average incidence over a set day interval — calc_window_incidence","text":"data.frame summarized incidence values (ave_incidence) id, latest date provided","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_incidence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute average incidence over a set day interval — calc_window_incidence","text":"Note incidence per 100K population. function assumes data passed observations day country, since use index-based approach compute average incidence, calendar-time.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_pct_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","title":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","text":"Given time series new cases certain date range, compute windowed percent change value cases (.e. one week versus previous 7 days, etc.). window right-aligned date column (beginning recent date shifting backwards). Note computing based index rather calendar time, results erroneous data complete every date.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_pct_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","text":"","code":"calc_window_pct_change(df, window = 14L, return_totals = FALSE)"},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_pct_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","text":"df Dataframe least date, new_cases columns window (default: 14) number days comparison windows return_totals (default: FALSE) return running sums used compute pct_change?","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_pct_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","text":"df summarized date new column pct_change, pct_change, cases_current, cases_prev return_totals TRUE","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/calc_window_pct_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Percent-change in Cases Over a Specified Window — calc_window_pct_change","text":"","code":"if (FALSE) { data <- get_covid_df() calc_window_pct_change(data, window = 14) # For grouped operations, group data beforehand and pipe: data |>   group_by(iso2code, country) |>   calc_window_pct_change(data, window = 14) }"},{"path":"https://cdcgov.github.io/SaviR/reference/cia_wfb_addn_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Countries with no current UNWPP data\nthat are manually updated here from CIA World Factbook\nhttps://www.cia.gov/the-world-factbook/field/population/country-comparison\nCurrently 2022 estimates are being used — cia_wfb_addn_countries","title":"Countries with no current UNWPP data\nthat are manually updated here from CIA World Factbook\nhttps://www.cia.gov/the-world-factbook/field/population/country-comparison\nCurrently 2022 estimates are being used — cia_wfb_addn_countries","text":"Countries current UNWPP data manually updated CIA World Factbook https://www.cia.gov/-world-factbook/field/population/country-comparison Currently 2022 estimates used","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/cia_wfb_addn_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countries with no current UNWPP data\nthat are manually updated here from CIA World Factbook\nhttps://www.cia.gov/the-world-factbook/field/population/country-comparison\nCurrently 2022 estimates are being used — cia_wfb_addn_countries","text":"","code":"cia_wfb_addn_countries"},{"path":"https://cdcgov.github.io/SaviR/reference/cia_wfb_addn_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Countries with no current UNWPP data\nthat are manually updated here from CIA World Factbook\nhttps://www.cia.gov/the-world-factbook/field/population/country-comparison\nCurrently 2022 estimates are being used — cia_wfb_addn_countries","text":"object class data.frame 1 rows 3 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/country_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Country Coordinates — country_coords","title":"Country Coordinates — country_coords","text":"saved shapefile world use onetable, mapping.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/country_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country Coordinates — country_coords","text":"","code":"country_coords"},{"path":"https://cdcgov.github.io/SaviR/reference/country_coords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country Coordinates — country_coords","text":"simple feature collection 172 features 4 variables: TYPE character Entity type ADMIN character English country name id character ISO 3166-1 alpha-3 country code geometry list List simple features mapping","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/country_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Country Coordinates — country_coords","text":"Projected using CRS: \"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\" Northern Cyprus, Antarctica, Fiji removed","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/reference/datasource_lk.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all data sources used in the package\nto be updated as needed. — datasource_lk","title":"A list of all data sources used in the package\nto be updated as needed. — datasource_lk","text":"list data sources used package updated needed.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/datasource_lk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all data sources used in the package\nto be updated as needed. — datasource_lk","text":"","code":"datasource_lk"},{"path":"https://cdcgov.github.io/SaviR/reference/datasource_lk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of all data sources used in the package\nto be updated as needed. — datasource_lk","text":"object class list length 19.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"function retrieve dataframe (df) combined Case/Death/Vaccine data country","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"","code":"get_combined_table(type = c(\"WHO\", \"Both\", \"legacy\"), geometry = FALSE)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"type (character) Specifies data streams include case/death data. See details information whether df include disaggregated China data (\"\" separates China, Taiwan, Hong Kong, Macau data) combined China data (\"\" combines China, Taiwan, Hong Kong, Macau data China) geometry (logical, default: FALSE) Specifies whether df include geometry column","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"Returns object class data.frame n rows 56(57, geometry = TRUE) columns","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"type argument used take two values: \"\" \"\", referring whether take data -, supplement data disaggregated China data JHU. early Jan 2023, China CDC ceased providing daily COVID-19 updates, Mainland China data provided JHU also stopped. Mar 10, 2023 JHU closed dashboard entirely, new sources located HK, Macau, Taiwan data. legacy analyses, old behavior \"\" now available \"legacy\" new \"\" type pulls data HK CHP, Taiwan CDC, JHU (Macau data thru Mar 10) addition China data (also includes Taiwan, HK, Macau data). data HK Taiwan duplicated way, use data \"\" option compute regional global trends.","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/reference/get_combined_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to retrieve a dataframe (df) with combined Case/Death/Vaccine data by country — get_combined_table","text":"","code":"if (FALSE) { # Get the df that combines China with Taiwan, Hong Kong, and Macau data df_who <- get_combined_table(\"WHO\") print(df_who) # Get the df that combines WHO China data (aggregated) with disggregated entries for HK, Taiwan, and Macau (from JHU thru Mar 10, 2023) df_both <- get_combined_table(\"Both\") print(df_both) # Get the df that uses both disaggregated China, Taiwan, Hong Kong, and Macau data (WHO + JHU = \"legacy\") # (JHU sunset on Mar 10, 2023 and China mainland data ceased earlier in the year) df_both <- get_combined_table(\"legacy\") print(df_both) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_country_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"get_country_coords — get_country_coords","title":"get_country_coords — get_country_coords","text":"Add dates country data","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_country_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_country_coords — get_country_coords","text":"","code":"get_country_coords(world = file.choose())"},{"path":"https://cdcgov.github.io/SaviR/reference/get_country_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_country_coords — get_country_coords","text":"world User prompt import shapefile. Output available package \"country_coords,\" function can used recreate dataset. regenerate make data available package, run following dev rebuild package: country_coords <- get_country_coords() usethis::use_data(country_coords, overwrite=T)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_country_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_country_coords — get_country_coords","text":"","code":"if (FALSE) { country_coords <- get_country_coords() }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_covid_df.html","id":null,"dir":"Reference","previous_headings":"","what":"get_covid_df — get_covid_df","title":"get_covid_df — get_covid_df","text":"Get prepare COVID data. Pull current case death counts source. disaggregated China, Taiwan, Hong Kong, Macau data pull JHU primary sources.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_covid_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_covid_df — get_covid_df","text":"","code":"get_covid_df(sources = c(\"all\", \"WHO\", \"WHO+JHU\", \"WHO+Primary\"))"},{"path":"https://cdcgov.github.io/SaviR/reference/get_covid_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_covid_df — get_covid_df","text":"sources one \"\", \"\", \"+JHU\", \"+Primary\" specifying data sources pull . See details.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_covid_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_covid_df — get_covid_df","text":"Returns data frame n rows 8 columns, including: date  date Date observation iso2code  character ISO 3166-1 alpha-2 country code country  character english country name new_cases  integer Number new cases reported date cumulative_cases  integer Number cumulative cases date new_deaths  integer Number new deaths reported date cumulative_deaths  integer Number cumulative deaths date source  character Data Source","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_covid_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_covid_df — get_covid_df","text":"legacy versions, default pull \"\" sources, included case/death time-series JHU data China Mainland, HK, Macau, Taiwan. Due sun-setting changes reporting, now capture HK Taiwan data primary sources (\"+Primary\"). Note also includes JHU data Macau reported thru Mar 10, 2023 JHU closes dashboard.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_find_testing_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling and processing OWID Testing Data — get_find_testing_long","title":"Pulling and processing OWID Testing Data — get_find_testing_long","text":"Pulling processing OWID Testing Data","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_find_testing_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling and processing OWID Testing Data — get_find_testing_long","text":"","code":"get_find_testing_long(find_maxgap = 31, flag_test_increase = 5)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_find_testing_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling and processing OWID Testing Data — get_find_testing_long","text":"find_maxgap (numeric, default: 31) Gap cumulative testing number linearly interpolate flag_test_increase (numeric, default: 5) Flag increase interpolated cumulative tests","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":null,"dir":"Reference","previous_headings":"","what":"get_gdeltnews — get_gdeltnews","title":"get_gdeltnews — get_gdeltnews","text":"Get last 2 weeks GDELT COVID news. Deduplicated DateTime, URL, DomainCountryCode.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_gdeltnews — get_gdeltnews","text":"","code":"get_gdeltnews(period = 14, start_date = Sys.Date() - 1)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_gdeltnews — get_gdeltnews","text":"period (numeric) Number days look back start_date start_date (Date) Date look back","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_gdeltnews — get_gdeltnews","text":"Returns data frame n rows 16 columns, including: DateTime  POSIXct URL  character Title  character SharingImage  character LangCode  character DocTone  double DomainCountryCode  character Location  character Lat  double Lon  double iso2code  character Adm1Code  character GeoType  character ContextualText  character GeoCoord  character Adm2Code  character","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_gdeltnews — get_gdeltnews","text":"Function may fail start date set current date future. News data files often avilable current date.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_gdeltnews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_gdeltnews — get_gdeltnews","text":"","code":"if (FALSE) { gdeltnews_df <- get_gdeltnews() }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_hospdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospitalization data from both OWID and ECDC — get_hospdata","title":"Get hospitalization data from both OWID and ECDC — get_hospdata","text":"Data pulled World Data (OWID) European Centre Disease Prevention Control(ECDC) countries European Union/European Economic Area(EU/EEA). See information OWID hospitalization data comes country. See document details ECDC data.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_hospdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospitalization data from both OWID and ECDC — get_hospdata","text":"","code":"get_hospdata()"},{"path":"https://cdcgov.github.io/SaviR/reference/get_hospdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospitalization data from both OWID and ECDC — get_hospdata","text":"Returns data frame n rows 6 columns, including: id character, ISO 3166-1 alpha-3 country code indicator character, one : \"Daily ICU occupancy\" (OWID & ECDC) \"Daily ICU occupancy per million\" (OWID) \"Daily hospital occupancy\" (OWID & ECDC) \"Daily hospital occupancy per million\" (OWID) \"Weekly new hospital admissions\" (OWID) \"Weekly new hospital admissions per 100k\" (ECDC) \"Weekly new hospital admissions per million\" (OWID) \"Weekly new ICU admissions\" (OWID) \"Weekly new ICU admissions per million\" (OWID) \"Weekly new ICU admissions per 100k\" (ECDC) source character, ECDC OWID, see details information. date date observation value value observation indicator carry_fwd_value data missing given date, non-missing value indicator-source-country combination within previous 14 days, column value carried forward.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_hospdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospitalization data from both OWID and ECDC — get_hospdata","text":"","code":"if (FALSE) {    # get the full hospital data   hospdata <- get_hospdata()    # get the most recent non-missing data for each indicator by country   # for a specific source   hospdata %>%     group_by(id, indicator, source) %>%     select(-carry_fwd_value) %>%     filter(!is.na(value),            source %in% \"OWID\") %>%     arrange(date) %>%     slice_max(order_by = date, n = 1) %>%     ungroup()    # to get in a wide format with indicators as columns   hospdata %>%     filter(source %in% \"ECDC\") %>%     select(-carry_fwd_value) %>%     tidyr::pivot_wider(names_from = indicator,                        values_from = value) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate COVID-19 Country Metadata Table — get_onetable","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"One table rule keys bind ! Output available package \"onetable,\" function can used recreate dataset. Note: Department State (DoS) regions handled externally CSV file.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"","code":"get_onetable(   usaid_metadata_file = NULL,   vintage = 2022,   country_geometries = country_coords )"},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"usaid_metadata_file (character, optional) file path file containing DoS regions. Expects least two columns, \"iso_alpha3\", \"state_region\" vintage (numeric, default: 2022) year population projections use UN data country_geometries (data.frame, default: country_coords) data.frame/sfc least two columns: \"iso3code\", \"geometry\"","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"Returns df 238 rows 10 columns, including: id  character ISO 3166-1 alpha-3 country code iso2code  character ISO 3166-1 alpha-2 country code state_region  character Department State Region who_region  character World Health Organization () Region acronym who_region_desc  character Region who_country  character english country name incomelevel  character Income Level population  numeric Total population eighteenplus  numeric Population age 18 years older geometry  sfc_GEOMETRY Geometry","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"Note: Population updates Pitcairn Islands Kosovo hardcoded must pulled manually via CIA factbook unless another source found.","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/reference/get_onetable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate COVID-19 Country Metadata Table — get_onetable","text":"","code":"if (FALSE) {   # UPDATING ONETABLE   # This is the typical location of the USAID DoS file:   usaid_file <- file.path(Sys.getenv(\"USERPROFILE\"), \"CDC\", \"ITF-COVID19-SAVI - Documents\", \"usaid_dos_regions.csv\")   onetable <- get_onetable(usaid_file)   usethis::use_data(onetable, overwrite = TRUE) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulling and processing OWID Testing Data — get_owid_testing_long","title":"Pulling and processing OWID Testing Data — get_owid_testing_long","text":"Pulling processing OWID Testing Data","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulling and processing OWID Testing Data — get_owid_testing_long","text":"","code":"get_owid_testing_long(find_maxgap = 31, flag_test_increase = 5)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulling and processing OWID Testing Data — get_owid_testing_long","text":"find_maxgap (numeric, default: 31) Gap cumulative testing number linearly interpolate flag_test_increase (numeric, default: 5) Flag increase interpolated cumulative tests","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"metadata table used within get_testing() determine country testing data computed. scrape OWID coronavirus testing website data related source definitions testing data country. Note OWID testing data longer updated 23 June 2022 .","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"","code":"owid_testing_meta  get_owid_testing_meta(url = \"https://ourworldindata.org/coronavirus-testing\")"},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"data frame 141 rows 5 columns, including: id  character ISO 3166-1 alpha-3 country code test_definition  character Description OWID testing definition case_definition  character Description OWID case definition posrate_definition  character Description OWID test positivity calculation posrate_direct  logical Indicator whether OWID pulls test positivity directly, computes ","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"Data set scraped information related data definitions sources country","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"owid_testing_meta: Saved dataset","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_owid_testing_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Our World in Data (OWID) Testing Metadata — owid_testing_meta","text":"","code":"if (FALSE) { owid_testing_meta <- get_owid_testing_meta() usethis::use_data(owid_testing_meta, overwrite = T) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_testpos7.html","id":null,"dir":"Reference","previous_headings":"","what":"get_preferred_testpos7 — get_preferred_testpos7","title":"get_preferred_testpos7 — get_preferred_testpos7","text":"Evaluates testing data sources quality based new tests per 1K test positivity last 7 days providing preferred choice two sources, OWID FIND OUTPUT:","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_testpos7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_preferred_testpos7 — get_preferred_testpos7","text":"","code":"get_preferred_testpos7(test_long, last_X_days = 14, analysis_date = NULL)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_testpos7.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_preferred_testpos7 — get_preferred_testpos7","text":"","code":"if (FALSE) { tests_preferred <- get_preferred_testpos7(test_long, last_X_days = 14, analysis_date = analysis_date) tests_preferred <- get_preferred_testpos7(test_long, last_X_days = 14, analysis_date = Sys.Date - 1) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_tests14.html","id":null,"dir":"Reference","previous_headings":"","what":"get_preferred_tests14 — get_preferred_tests14","title":"get_preferred_tests14 — get_preferred_tests14","text":"Evaluates testing data sources quality based new tests per 1K last 14 days providing preferred choice two sources, OWID FIND OUTPUT: recent 14-day average data points new tests per 1K based procedure picking preferred data source accounting flags, pick OWID default OWID FIND available last X days Subject future revisions","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_tests14.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_preferred_tests14 — get_preferred_tests14","text":"","code":"get_preferred_tests14(test_long, last_X_days = 14, analysis_date = NULL)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_preferred_tests14.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_preferred_tests14 — get_preferred_tests14","text":"","code":"if (FALSE) { tests_preferred <- get_preferred_tests14(test_long, last_X_days = 14, analysis_date = analysis_date) tests_preferred <- get_preferred_tests14(test_long, last_X_days = 14, analysis_date = Sys.Date - 1) }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Get testing data from Our World in Data (OWID) or FIND — get_testing","title":"Get testing data from Our World in Data (OWID) or FIND — get_testing","text":"Pulls testing data either OWID FIND sources based 7d testing / 1K positivity rate. recent 7-day average data points new tests per 1K positivity rate use risk matrix plots region. accounting flags, pick OWID default OWID FIND available last X days","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get testing data from Our World in Data (OWID) or FIND — get_testing","text":"","code":"get_testing(analysis_date = Sys.Date() - 1L)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get testing data from Our World in Data (OWID) or FIND — get_testing","text":"analysis_date (date default: Sys.Date() - 1L) Start date choose OWID FIND data","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get testing data from Our World in Data (OWID) or FIND — get_testing","text":"Returns data frame n rows 5 columns, including: id character ISO 3166-1 alpha-3 country code date date Date testing observation new_tests_smoothed_per_thousand double Tests / 1000 population (7d smooth) new_tests_smoothed_per_thousand_14 double Tests / 1000 population (14d smooth) positive_rate double Test positivity rate (7d smooth)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get testing data from Our World in Data (OWID) or FIND — get_testing","text":"","code":"if (FALSE) { testing <- get_testing() }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing_long.html","id":null,"dir":"Reference","previous_headings":"","what":"get_testing_long — get_testing_long","title":"get_testing_long — get_testing_long","text":"Download combine full time series data related testing compiled World Data (OWID) FIND. Note OWID testing data longer updated 23 June 2022 .","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_testing_long — get_testing_long","text":"","code":"get_testing_long(find_maxgap = 31, flag_test_increase = 5)"},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_testing_long — get_testing_long","text":"find_maxgap (numeric, default: 31) Gap cumulative testing number linearly interpolate flag_test_increase (numeric, default: 5) Flag increase interpolated cumulative tests","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_testing_long — get_testing_long","text":"Returns longitudinal data frame FIND OWID data sets consistent definitions n rows 38 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_testing_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_testing_long — get_testing_long","text":"","code":"if (FALSE) { testing_long <- get_testing_long() }"},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax.html","id":null,"dir":"Reference","previous_headings":"","what":"get_vax — get_vax","title":"get_vax — get_vax","text":"Get vaccination data World Data. (OWID) Note cumulative totals carried forward NA given day.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_vax — get_vax","text":"","code":"get_vax()"},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_vax — get_vax","text":"Returns data frame n rows 17 columns, including: owid_country character English country name OWID id character ISO 3166-1 alpha-3 country code date date Date vaccination observation total_vaccinations double total number doses administered. vaccines require multiple doses, individual dose counted. person receives one dose vaccine, metric goes 1. receive second dose, goes 1 . receive third/booster dose, goes 1 . people_vaccinated double total number people received least one vaccine dose. person receives first dose 2-dose vaccine, metric goes 1. receive second dose, metric stays . people_fully_vaccinated double total number people received doses prescribed vaccination protocol. person receives first dose 2-dose vaccine, metric stays . receive second dose, metric goes 1. total_boosters integer total number COVID-19 vaccination booster doses administered (doses administered beyond number prescribed vaccination protocol) daily_vaccinations_raw integer daily change total number doses administered. calculated consecutive days. raw measure provided data checks transparency, strongly recommend analysis daily vaccination rates conducted using daily_vaccinations instead. daily_vaccinations integer new doses administered per day (7-day smoothed). countries report data daily basis, assume doses changed equally daily basis periods data reported. produces complete series daily figures, averaged rolling 7-day window. total_vaccinations_per_hundred double total_vaccinations per 100 people total population country. people_vaccinated_per_hundred double people_vaccinated per 100 people total population country. people_fully_vaccinated_per_hundred double people_fully_vaccinated per 100 people total population country. total_boosters_per_hundred double Total number COVID-19 vaccination booster doses administered per 100 people total population. daily_vaccinations_per_million integer daily_vaccinations per 1,000,000 people total population country. daily_people_vaccinated integer daily change number people received least one vaccine dose. daily_people_vaccinated_per_hundred double daily_people_vaccinated per 100 people total population country. daily_vaccinations_per_hundred double daily_vaccinations per 100 people total population country.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data on count of vaccinations by vaccine manufacturer from OWID — get_vax_by_type","title":"Get data on count of vaccinations by vaccine manufacturer from OWID — get_vax_by_type","text":"Returns number vaccination doses delivered manufacturer. Note data daily time series reported intermittently countries. Data pulled OWID. subset countries data available, information countries associated source data can found .","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data on count of vaccinations by vaccine manufacturer from OWID — get_vax_by_type","text":"","code":"get_vax_by_type()"},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_by_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data on count of vaccinations by vaccine manufacturer from OWID — get_vax_by_type","text":"Returns data frame n rows 6 columns, including: owid_country character, English country name OWID (may match country name) id character, ISO 3166-1 alpha-3 country code date date, Date observation vaccine character, vaccine manufacturer total_vaccinations integer, cumulative number vaccinations given date new_vaccinations integer, new vaccinations given date interval, note actually daily, depends cadence reporting","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get last non-NA date for key vaccination metrics by country — get_vax_dates","title":"Get last non-NA date for key vaccination metrics by country — get_vax_dates","text":"Computes latest date vaccination data provided country OWID source.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get last non-NA date for key vaccination metrics by country — get_vax_dates","text":"","code":"get_vax_dates()"},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get last non-NA date for key vaccination metrics by country — get_vax_dates","text":"Returns data frame n rows 5 columns, including: owid_country character English country name OWID (may match country name) id character ISO 3166-1 alpha-3 country code total_doses_date Date Date last update total vaccine doses partial_date Date Date last update persons vaccinated fully_date Date Date last update persons completed primary vaccination series booster_date Date Date last update persons boosted","code":""},{"path":[]},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_manufacturers.html","id":null,"dir":"Reference","previous_headings":"","what":"get_vax_manufacturers — get_vax_manufacturers","title":"get_vax_manufacturers — get_vax_manufacturers","text":"Get vaccination metadata World Data (OWID)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_manufacturers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_vax_manufacturers — get_vax_manufacturers","text":"","code":"get_vax_manufacturers()"},{"path":"https://cdcgov.github.io/SaviR/reference/get_vax_manufacturers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_vax_manufacturers — get_vax_manufacturers","text":"Returns data frame 218(-ish) rows 6 columns, including: owid_country  character English country name OWID id  character ISO 3166-1 alpha-3 country code vaccines  character list vaccines administered country current date. last_observation_date  date date last observation OWID data. source_name  character name OWID source data collection. source_website  character web location OWID source. can standard URL numbers consistently reported given page; otherwise source last data point.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/income_aes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetics for World Bank Country income group — income_aes","title":"Aesthetics for World Bank Country income group — income_aes","text":"Used internally plotting functions style plots World Bank income group.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/income_aes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetics for World Bank Country income group — income_aes","text":"","code":"income_aes"},{"path":"https://cdcgov.github.io/SaviR/reference/income_aes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Aesthetics for World Bank Country income group — income_aes","text":"object class data.frame 5 rows 4 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/income_aes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetics for World Bank Country income group — income_aes","text":"cat_values character plot legend values (match directly World Bank income levels) cat_names character plot legend names (displayed plot legend) cat_colors character Color mappings income group level cat_lines character Line-styles income group level","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/manual_iso3_lk.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual ISO 3166-1 alpha-3 country code entries that don't get parsed in get_onetable() — manual_iso3_lk","title":"Manual ISO 3166-1 alpha-3 country code entries that don't get parsed in get_onetable() — manual_iso3_lk","text":"Manual ISO 3166-1 alpha-3 country code entries get parsed get_onetable()","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/manual_iso3_lk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual ISO 3166-1 alpha-3 country code entries that don't get parsed in get_onetable() — manual_iso3_lk","text":"","code":"manual_iso3_lk"},{"path":"https://cdcgov.github.io/SaviR/reference/manual_iso3_lk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Manual ISO 3166-1 alpha-3 country code entries that don't get parsed in get_onetable() — manual_iso3_lk","text":"object class list length 3.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_burden.html","id":null,"dir":"Reference","previous_headings":"","what":"Burden Map — map_burden","title":"Burden Map — map_burden","text":"Cross-sectional map: Average daily incidence past number days specified country.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_burden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Burden Map — map_burden","text":"","code":"map_burden(df, region = NULL, time_step = 7)"},{"path":"https://cdcgov.github.io/SaviR/reference/map_burden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Burden Map — map_burden","text":"df data.frame least following columns id, date, new_cases region (optional) character string specifying DoS region zoom , NULL none time_step (numeric) number days average incidence ","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_burden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Burden Map — map_burden","text":"Produces map burden (incidence per 100,000)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_burden.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Burden Map — map_burden","text":"map_burden always produces average incidence map based latest date included input data.frame. ensure data completely observed timestep, average incidence computed based index rather calendar date.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_template.html","id":null,"dir":"Reference","previous_headings":"","what":"map_template — map_template","title":"map_template — map_template","text":"Cross-sectional map. Uses stored country_coords data base map.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_template — map_template","text":"","code":"map_template(df, category_color_labels = \"None\", category_color_values)"},{"path":"https://cdcgov.github.io/SaviR/reference/map_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_template — map_template","text":"df dataframe following: country, geometry, date, result = factor value category_color_labels List labels map factor values df. Use \"None\" categories. category_color_values List color values mapping labels. Needs length category_color_labels!","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"map_trend — map_trend","title":"map_trend — map_trend","text":"Cross-sectional map: Average daily incidence past 7 days country.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_trend — map_trend","text":"","code":"map_trend(df, region = NULL, time_step = 7)"},{"path":"https://cdcgov.github.io/SaviR/reference/map_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_trend — map_trend","text":"df data.frame least following columns: id, date, new_cases region (optional) character string specifying DoS region zoom , NULL none time_step (default: 7) time step days percent-change represents","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_trend — map_trend","text":"Produces map trend (% change past time_step days)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_trend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"map_trend — map_trend","text":"percent change always computed relative latest date data.frame passed, pre-filter needed.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_vaccinations.html","id":null,"dir":"Reference","previous_headings":"","what":"map_vaccinations — map_vaccinations","title":"map_vaccinations — map_vaccinations","text":"Cross-sectional map: People vaccinated per 100 country Fully vaccinated.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_vaccinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_vaccinations — map_vaccinations","text":"","code":"map_vaccinations(   df,   region = c(\"WHO Region\", \"State Region\"),   vac_type = c(\"People\", \"Fully\", \"Booster\", \"Pop18\") )"},{"path":"https://cdcgov.github.io/SaviR/reference/map_vaccinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_vaccinations — map_vaccinations","text":"df dataframe following: region, country, date, people vaccinated per 100 8-level factors (<3, 3-<10, 10-<20, 20-<30, 30-<40, 40-<60, 60-<70, 70+). region one \"Region\" \"State Region\" vac_type one \"People\", \"Fully\", \"Booster\", \"Pop18\" specifying vaccine metric desired","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/map_vaccinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_vaccinations — map_vaccinations","text":"Produces map vaccination coverage country","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable.html","id":null,"dir":"Reference","previous_headings":"","what":"Onetable — onetable","title":"Onetable — onetable","text":"centralized metadata table containing country ids, categories, population counts","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Onetable — onetable","text":"","code":"onetable"},{"path":"https://cdcgov.github.io/SaviR/reference/onetable.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Onetable — onetable","text":"data frame 237 rows 10 columns, including: idcharacter ISO 3166-1 alpha-3 country code iso2codecharacter ISO 3166-1 alpha-2 country code state_regioncharacter US Department State Region who_regioncharacter Region acronym who_region_desccharacter Region english name who_countrycharacter English country text name incomelevel_valuecharacter World Bank Income level populationdouble UN Total population estimates 2020 eighteenplusdouble UN 18+ population estimates 2020 geometrylist List simple features mapping","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Onetable — onetable","text":"Population figures Pitcairn Islands augmented CIA World Factbook.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable.html","id":"sources","dir":"Reference","previous_headings":"","what":"Sources","title":"Onetable — onetable","text":"https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/EXCEL_FILES/1_General/WPP2022_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT_REV1.xlsx https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2022_TotalPopulationBySex.csv https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/EXCEL_FILES/2_Population/WPP2022_POP_F03_1_POPULATION_SELECT_AGE_GROUPS_BOTH_SEXES.xlsx https://www.cia.gov/-world-factbook/field/population/country-comparison https://worldbank.org","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable_addn_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional entries not acknowledged by WHO\nbut required to create onetable — onetable_addn_countries","title":"Additional entries not acknowledged by WHO\nbut required to create onetable — onetable_addn_countries","text":"Additional entries acknowledged required create onetable","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/onetable_addn_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional entries not acknowledged by WHO\nbut required to create onetable — onetable_addn_countries","text":"","code":"onetable_addn_countries"},{"path":"https://cdcgov.github.io/SaviR/reference/onetable_addn_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Additional entries not acknowledged by WHO\nbut required to create onetable — onetable_addn_countries","text":"object class data.frame 3 rows 3 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/owid_lk.html","id":null,"dir":"Reference","previous_headings":"","what":"OWID location renamings — owid_lk","title":"OWID location renamings — owid_lk","text":"OWID location renamings","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/owid_lk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OWID location renamings — owid_lk","text":"","code":"owid_lk"},{"path":"https://cdcgov.github.io/SaviR/reference/owid_lk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OWID location renamings — owid_lk","text":"object class character length 12.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_epicurve — plot_epicurve","title":"plot_epicurve — plot_epicurve","text":"(EPI WEEK) Visualize epi curve epi-weeks (Monday-Sunday) region(s), State region(s), Income levels.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_epicurve — plot_epicurve","text":"","code":"plot_epicurve(   df,   type = \"cases\",   by_cat = \"WHO Region\",   legend = \"in\",   transparent = T )"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_epicurve — plot_epicurve","text":"df dataframe following: date, new_cases one columns by_cat: who_region, state_region, incomelevel_value. Produces epi curve, stacked bar plot epi-week (Monday-Sunday). by_cat = \"Region\" (default), \"State Region\" \"Income Level\" legend Default \"\" - position legend inside plot area. transparent Default TRUE - returns transparent plot.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_dailydouble.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_epicurve_dailydouble — plot_epicurve_dailydouble","title":"plot_epicurve_dailydouble — plot_epicurve_dailydouble","text":"(DAILY) Visualize epi curve cases deaths. Default viz individual countries.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_dailydouble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_epicurve_dailydouble — plot_epicurve_dailydouble","text":"","code":"plot_epicurve_dailydouble(df)"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_dailydouble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_epicurve_dailydouble — plot_epicurve_dailydouble","text":"df dataframe following: country, date, cases deaths","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_epidouble.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_epicurve_epidouble — plot_epicurve_epidouble","title":"plot_epicurve_epidouble — plot_epicurve_epidouble","text":"(EPI WEEK) Visualize epi curve cases deaths. Default viz individual countries.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_epidouble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_epicurve_epidouble — plot_epicurve_epidouble","text":"","code":"plot_epicurve_epidouble(df)"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_epidouble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_epicurve_epidouble — plot_epicurve_epidouble","text":"df dataframe following: country, weekdate, cases deaths","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_epicurve_ind — plot_epicurve_ind","title":"plot_epicurve_ind — plot_epicurve_ind","text":"(DAILY) Visualize epi curve cases deaths. Default viz individual countries.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_epicurve_ind — plot_epicurve_ind","text":"","code":"plot_epicurve_ind(df, type = \"cases\", incidence = T)"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_epicurve_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_epicurve_ind — plot_epicurve_ind","text":"df dataframe following: country, date, cases /deaths type Default cases. incidence Default TRUE. Specify inputs incidence values .","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_riskmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_riskmatrix — plot_riskmatrix","title":"plot_riskmatrix — plot_riskmatrix","text":"Plot risk matrix.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_riskmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_riskmatrix — plot_riskmatrix","text":"","code":"plot_riskmatrix(df, region = \"WHO Region\", v = T, h = T)"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_riskmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_riskmatrix — plot_riskmatrix","text":"df dataframe riskmatrix stats.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_vaxcoverage — plot_vaxcoverage","title":"plot_vaxcoverage — plot_vaxcoverage","text":"Plot vaccination coverage (partial fully) region(s), State region(s), Income levels.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_vaxcoverage — plot_vaxcoverage","text":"","code":"plot_vaxcoverage(   df,   type = c(\"People\", \"Fully\", \"Booster\", \"Pop18\"),   by_cat = c(\"State Region\", \"WHO Region\", \"Income Level\"),   plot = c(\"Vaccination\", \"Population\") )"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_vaxcoverage — plot_vaxcoverage","text":"df dataframe vaccination stats. type = \"People\" (default) people received least 1 , \"Fully\" people completed initial protocol, \"Booster\" booster doses , \"Pop18\" people people vaccinated vaccine eligible population by_cat = \"State Region\" (default), \"Region\" \"Income Level\" plot = \"Vaccination\" (default) display bubble size based total vaccine doses administered country, \"Population\" display plot bubble size based population size country.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_vaxcoverage_pop — plot_vaxcoverage_pop","title":"plot_vaxcoverage_pop — plot_vaxcoverage_pop","text":"Visualize vaccine coverage date reporting region(s), State region(s), Income levels.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_vaxcoverage_pop — plot_vaxcoverage_pop","text":"","code":"plot_vaxcoverage_pop(   df,   type = c(\"People\", \"Fully\", \"Booster\", \"Pop18\"),   by_cat = \"State Region\" )"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_vaxcoverage_pop — plot_vaxcoverage_pop","text":"df dataframe following: date, people_vaccinated_per_hundred people_fully_vaccinated_per_hundred, one columns by_cat: who_region, state_region, incomelevel_value. type = \"partial\" (default) partial vaccinated \"full\" fully vaccinated by_cat = \"State Region\" (default), \"Region\" \"Income Level\" countries = \"\" (default) countries \"AMC/AU\" AMC/AU countries (n=100)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcoverage_pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_vaxcoverage_pop — plot_vaxcoverage_pop","text":"NOTE: Deprecated favor just using plot_vaxcoverage","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_vaxcurve — plot_vaxcurve","title":"plot_vaxcurve — plot_vaxcurve","text":"Visualize vaccine coverage date reporting region(s), State region(s), Income levels.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_vaxcurve — plot_vaxcurve","text":"","code":"plot_vaxcurve(   df,   type = \"partial\",   by_cat = \"Dept. of State Region\",   countries = \"All\" )"},{"path":"https://cdcgov.github.io/SaviR/reference/plot_vaxcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_vaxcurve — plot_vaxcurve","text":"df dataframe following: date, people_vaccinated_per_hundred people_fully_vaccinated_per_hundred, one columns by_cat: who_region, state_region, incomelevel_value. type = \"partial\" (default) partial vaccinated \"full\" fully vaccinated by_cat = \"State Region\" (default), \"Region\" \"Income Level\" countries = \"\" (default) countries \"AMC/AU\" AMC/AU countries (n=100)","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/state_aes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetics for US Department of State regions — state_aes","title":"Aesthetics for US Department of State regions — state_aes","text":"Used internally plotting functions style plots DoS-regions.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/state_aes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetics for US Department of State regions — state_aes","text":"","code":"state_aes"},{"path":"https://cdcgov.github.io/SaviR/reference/state_aes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Aesthetics for US Department of State regions — state_aes","text":"object class data.frame 8 rows 4 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/state_aes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetics for US Department of State regions — state_aes","text":"cat_values character plot legend values (match directly DoS region names) cat_names character plot legend names (displayed plot legend) cat_colors character Color mappings state region cat_lines character Line-styles state region","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"table_10incidence — table_10incidence","title":"table_10incidence — table_10incidence","text":"Table displaying top 10's.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"table_10incidence — table_10incidence","text":"","code":"table_10incidence(df, type = \"Global\", run_date = \"Enter a date\")"},{"path":"https://cdcgov.github.io/SaviR/reference/table_10incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"table_10incidence — table_10incidence","text":"df dataframe following order: country, value1 - incidence, value2 - percent change, date","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10mostcases.html","id":null,"dir":"Reference","previous_headings":"","what":"SaviR Case Tables for Various CDC Documents — table_10mostcases","title":"SaviR Case Tables for Various CDC Documents — table_10mostcases","text":"table functions provide interface produce gt tables CDC Reports. tables computed using standard data.frame cases deaths provided get_covid_df() get_combined_table() table_10mostcases displays table top-10 countries total cases reported time period specified table_10incidence displays table top-10 countries average incidence time period specified table_10percentchange displays table top-10 countries percent change time period specified","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10mostcases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SaviR Case Tables for Various CDC Documents — table_10mostcases","text":"","code":"table_10mostcases(df, time_step = 7, region = NULL, data_as_of = NULL)  table_10incidence(df, time_step = 7, region = NULL, data_as_of = NULL)  table_10percentchange(   df,   time_step = 7,   second_time_step = 28,   region = NULL,   data_as_of = NULL )"},{"path":"https://cdcgov.github.io/SaviR/reference/table_10mostcases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SaviR Case Tables for Various CDC Documents — table_10mostcases","text":"df data.frame least following columns: id, date, new_cases time_step (numeric, default: 7) time step days compute values region (optional) character string specifying DoS region title, NULL none data_as_of (optional) character string data--date. NULL, inferred latest date data. second_time_step (numeric, default: 28) table_10percentchange, time days compute percent change second column","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10mostcases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SaviR Case Tables for Various CDC Documents — table_10mostcases","text":"pretty gt table","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10percentchange.html","id":null,"dir":"Reference","previous_headings":"","what":"table_10percentchange — table_10percentchange","title":"table_10percentchange — table_10percentchange","text":"Table displaying top 10's.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10percentchange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"table_10percentchange — table_10percentchange","text":"","code":"table_10percentchange(df, type = \"Global\", run_date = \"Enter a date\")"},{"path":"https://cdcgov.github.io/SaviR/reference/table_10percentchange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"table_10percentchange — table_10percentchange","text":"df dataframe following order: country, value1 - last week percent change, value2 - 4 week percent change, date","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10vaccinations.html","id":null,"dir":"Reference","previous_headings":"","what":"table_10vaccinations — table_10vaccinations","title":"table_10vaccinations — table_10vaccinations","text":"Table displaying top 10's.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10vaccinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"table_10vaccinations — table_10vaccinations","text":"","code":"table_10vaccinations(   df,   vac_type = c(\"People\", \"Fully\", \"Booster\"),   type = \"Global\",   run_date = \"Enter a date\" )"},{"path":"https://cdcgov.github.io/SaviR/reference/table_10vaccinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"table_10vaccinations — table_10vaccinations","text":"df dataframe following order: country, value1 - people vaccinated per 100, value2 - daily vaccines administered per 100 people, date vac_type (character, default: \"Partial\") one \"Partial\", \"Fully\" depending vaccination status tabulated type (character, default: \"Global\") Text name subset data df , included title run_date (character, default: \"Enter date\") Run date include table source","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_10vaccinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"table_10vaccinations — table_10vaccinations","text":"","code":"if (FALSE) { sunday_date <- lubridate::floor_date(Sys.Date(), \"week\", week_start = 7) df_who <- get_combined_table(\"WHO\")  # Take global data for countries with population > 1,000,000 df_who %>%   filter(date <= sunday_date, population > 1000000) %>%   group_by(country) %>%   filter(!is.na(people_fully_vaccinated_per_hundred)) %>%   filter(date == max(date)) %>%   ungroup() %>%   select(country = who_country, value1 = people_fully_vaccinated_per_hundred, value2 = daily_vaccinations_per_hundred) %>%   arrange(desc(value1)) %>%   head(10) %>%   table_10vaccinations(., run_date = format(sunday_date, \"%B %d, %Y\")) }"},{"path":"https://cdcgov.github.io/SaviR/reference/table_countriesofconcern.html","id":null,"dir":"Reference","previous_headings":"","what":"table_countriesofconcern — table_countriesofconcern","title":"table_countriesofconcern — table_countriesofconcern","text":"Table displaying stats list countries concern.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_countriesofconcern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"table_countriesofconcern — table_countriesofconcern","text":"","code":"table_countriesofconcern(df, df_vax_man, country_list, df_variant_pct = NULL)"},{"path":"https://cdcgov.github.io/SaviR/reference/table_countriesofconcern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"table_countriesofconcern — table_countriesofconcern","text":"df dataframe following: id, who_country, date, new_cases, week_case_incidence, week_case, prev_week_case, percent_change_case, new_deaths, week_death_incidence, week_death, prev_week_death, percent_change_death, people_vaccinated_per_hundred, total_vaccinations_per_hundred df_vax_man dataframe following: id, date, vaccines country_list (character) vector ISO 3166-1 alpha-3 country codes countries highlight df_variant_pct (optional) dataframe least \"id\" (ISO 3166-1 alpha-3), additional columns indicating % variants sequenced add bottom table","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_countriesofconcern.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"table_countriesofconcern — table_countriesofconcern","text":"Recent Date Vaccinations column computed internally via call get_vax_dates() df_variant_pct provided, two columns Delta Omicron added fill manually","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/table_countriesofconcern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"table_countriesofconcern — table_countriesofconcern","text":"","code":"if (FALSE) { # Get case/death/vax data df_both <- get_combined_table(\"Both\")  # Select some countries c_list <- c(\"United Kingdom\", \"Denmark\", \"United States of America\") # The function expects ISO3 codes, so parse if input is raw c_list_iso <- parse_country(c_list, to = \"iso3c\")  # Take the latest observation for each country (vax + case + deaths) df_both_latest <- df_both %>%   group_by(id) %>%   filter(date == max(date)) %>%   ungroup()  # Pull metadata on vax manufacturers vax_man <- get_vax_manufacturers()  # Produce table table_countriesofconcern(df_both_latest, vax_man, c_list_iso) }"},{"path":"https://cdcgov.github.io/SaviR/reference/who_aes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetics for WHO regions — who_aes","title":"Aesthetics for WHO regions — who_aes","text":"Used internally plotting functions style plots -regions.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_aes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetics for WHO regions — who_aes","text":"","code":"who_aes"},{"path":"https://cdcgov.github.io/SaviR/reference/who_aes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Aesthetics for WHO regions — who_aes","text":"object class data.frame 6 rows 4 columns.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_aes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetics for WHO regions — who_aes","text":"cat_values character plot legend values (match directly region names) cat_names character plot legend names (displayed plot legend) cat_colors character Color mappings region cat_lines character Line-styles region","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_lk.html","id":null,"dir":"Reference","previous_headings":"","what":"WHO Country renamings / rebinnings — who_lk","title":"WHO Country renamings / rebinnings — who_lk","text":"Country renamings / rebinnings","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_lk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WHO Country renamings / rebinnings — who_lk","text":"","code":"who_lk"},{"path":"https://cdcgov.github.io/SaviR/reference/who_lk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"WHO Country renamings / rebinnings — who_lk","text":"object class character length 23.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_region_lk.html","id":null,"dir":"Reference","previous_headings":"","what":"WHO ","title":"WHO ","text":"helper lookup table map region acronyms \"pretty\" english name.","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_region_lk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WHO ","text":"","code":"who_region_lk"},{"path":"https://cdcgov.github.io/SaviR/reference/who_region_lk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"WHO ","text":"character vector length 6: AMRO character Americas EURO character Europe SEARO character Southeast Asia EMRO character Eastern Mediterranean AFRO character Africa WPRO character Western Pacific","code":""},{"path":"https://cdcgov.github.io/SaviR/reference/who_region_lk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"WHO ","text":"internal use generating onetable via get_onetable()","code":""}]
